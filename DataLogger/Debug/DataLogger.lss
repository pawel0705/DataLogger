
DataLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ad4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00002b48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002b78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00002bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019ca  00000000  00000000  00002cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000993  00000000  00000000  000046b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001209  00000000  00000000  00005049  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00006254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065d  00000000  00000000  00006680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000839  00000000  00000000  00006cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00007516  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <ds18b20_writebit+0x86>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <__stack+0x1af>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <ds18b20_reset+0x240>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <ds18b20_reset+0x2e>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d4 e0       	ldi	r29, 0x04	; 4
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e4 ed       	ldi	r30, 0xD4	; 212
     176:	fa e2       	ldi	r31, 0x2A	; 42
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a0 30       	cpi	r26, 0x00	; 0
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a1 30       	cpi	r26, 0x01	; 1
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <main>
     198:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <ds18b20_reset>:
#include "ds18b20.h"

/*
 * ds18b20 init
 */
uint8_t ds18b20_reset() {
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
     1ac:	c1 56       	subi	r28, 0x61	; 97
     1ae:	d1 09       	sbc	r29, r1
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;

	//low for 480us
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
     1ba:	88 e2       	ldi	r24, 0x28	; 40
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	28 e2       	ldi	r18, 0x28	; 40
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	f9 01       	movw	r30, r18
     1c4:	20 81       	ld	r18, Z
     1c6:	2e 7f       	andi	r18, 0xFE	; 254
     1c8:	fc 01       	movw	r30, r24
     1ca:	20 83       	st	Z, r18
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
     1cc:	87 e2       	ldi	r24, 0x27	; 39
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	27 e2       	ldi	r18, 0x27	; 39
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	f9 01       	movw	r30, r18
     1d6:	20 81       	ld	r18, Z
     1d8:	21 60       	ori	r18, 0x01	; 1
     1da:	fc 01       	movw	r30, r24
     1dc:	20 83       	st	Z, r18
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	a0 ef       	ldi	r26, 0xF0	; 240
     1e4:	b3 e4       	ldi	r27, 0x43	; 67
     1e6:	89 83       	std	Y+1, r24	; 0x01
     1e8:	9a 83       	std	Y+2, r25	; 0x02
     1ea:	ab 83       	std	Y+3, r26	; 0x03
     1ec:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     1ee:	8e 01       	movw	r16, r28
     1f0:	0a 5b       	subi	r16, 0xBA	; 186
     1f2:	1f 4f       	sbci	r17, 0xFF	; 255
     1f4:	2b ea       	ldi	r18, 0xAB	; 171
     1f6:	3a ea       	ldi	r19, 0xAA	; 170
     1f8:	4a ea       	ldi	r20, 0xAA	; 170
     1fa:	5e e3       	ldi	r21, 0x3E	; 62
     1fc:	69 81       	ldd	r22, Y+1	; 0x01
     1fe:	7a 81       	ldd	r23, Y+2	; 0x02
     200:	8b 81       	ldd	r24, Y+3	; 0x03
     202:	9c 81       	ldd	r25, Y+4	; 0x04
     204:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     208:	dc 01       	movw	r26, r24
     20a:	cb 01       	movw	r24, r22
     20c:	f8 01       	movw	r30, r16
     20e:	80 83       	st	Z, r24
     210:	91 83       	std	Z+1, r25	; 0x01
     212:	a2 83       	std	Z+2, r26	; 0x02
     214:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     216:	8e 01       	movw	r16, r28
     218:	06 5b       	subi	r16, 0xB6	; 182
     21a:	1f 4f       	sbci	r17, 0xFF	; 255
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 e8       	ldi	r20, 0x80	; 128
     222:	5e e3       	ldi	r21, 0x3E	; 62
     224:	69 81       	ldd	r22, Y+1	; 0x01
     226:	7a 81       	ldd	r23, Y+2	; 0x02
     228:	8b 81       	ldd	r24, Y+3	; 0x03
     22a:	9c 81       	ldd	r25, Y+4	; 0x04
     22c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     230:	dc 01       	movw	r26, r24
     232:	cb 01       	movw	r24, r22
     234:	f8 01       	movw	r30, r16
     236:	80 83       	st	Z, r24
     238:	91 83       	std	Z+1, r25	; 0x01
     23a:	a2 83       	std	Z+2, r26	; 0x02
     23c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     23e:	ce 01       	movw	r24, r28
     240:	8a 5b       	subi	r24, 0xBA	; 186
     242:	9f 4f       	sbci	r25, 0xFF	; 255
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e8       	ldi	r20, 0x80	; 128
     24a:	5f e3       	ldi	r21, 0x3F	; 63
     24c:	fc 01       	movw	r30, r24
     24e:	60 81       	ld	r22, Z
     250:	71 81       	ldd	r23, Z+1	; 0x01
     252:	82 81       	ldd	r24, Z+2	; 0x02
     254:	93 81       	ldd	r25, Z+3	; 0x03
     256:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     25a:	88 23       	and	r24, r24
     25c:	3c f4       	brge	.+14     	; 0x26c <ds18b20_reset+0xcc>
		__ticks = 1;
     25e:	ce 01       	movw	r24, r28
     260:	82 5b       	subi	r24, 0xB2	; 178
     262:	9f 4f       	sbci	r25, 0xFF	; 255
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18
     26a:	2c c1       	rjmp	.+600    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	else if (__tmp2 > 65535)
     26c:	ce 01       	movw	r24, r28
     26e:	86 5b       	subi	r24, 0xB6	; 182
     270:	9f 4f       	sbci	r25, 0xFF	; 255
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	3f ef       	ldi	r19, 0xFF	; 255
     276:	4f e7       	ldi	r20, 0x7F	; 127
     278:	57 e4       	ldi	r21, 0x47	; 71
     27a:	fc 01       	movw	r30, r24
     27c:	60 81       	ld	r22, Z
     27e:	71 81       	ldd	r23, Z+1	; 0x01
     280:	82 81       	ldd	r24, Z+2	; 0x02
     282:	93 81       	ldd	r25, Z+3	; 0x03
     284:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     288:	18 16       	cp	r1, r24
     28a:	0c f0       	brlt	.+2      	; 0x28e <ds18b20_reset+0xee>
     28c:	cd c0       	rjmp	.+410    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		_delay_ms(__us / 1000.0);
     28e:	20 e0       	ldi	r18, 0x00	; 0
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	4a e7       	ldi	r20, 0x7A	; 122
     294:	54 e4       	ldi	r21, 0x44	; 68
     296:	69 81       	ldd	r22, Y+1	; 0x01
     298:	7a 81       	ldd	r23, Y+2	; 0x02
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	9c 81       	ldd	r25, Y+4	; 0x04
     29e:	0e 94 13 11 	call	0x2226	; 0x2226 <__divsf3>
     2a2:	dc 01       	movw	r26, r24
     2a4:	cb 01       	movw	r24, r22
     2a6:	9e 01       	movw	r18, r28
     2a8:	21 5b       	subi	r18, 0xB1	; 177
     2aa:	3f 4f       	sbci	r19, 0xFF	; 255
     2ac:	f9 01       	movw	r30, r18
     2ae:	80 83       	st	Z, r24
     2b0:	91 83       	std	Z+1, r25	; 0x01
     2b2:	a2 83       	std	Z+2, r26	; 0x02
     2b4:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2b6:	8e 01       	movw	r16, r28
     2b8:	0d 5a       	subi	r16, 0xAD	; 173
     2ba:	1f 4f       	sbci	r17, 0xFF	; 255
     2bc:	ce 01       	movw	r24, r28
     2be:	81 5b       	subi	r24, 0xB1	; 177
     2c0:	9f 4f       	sbci	r25, 0xFF	; 255
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	4a e7       	ldi	r20, 0x7A	; 122
     2c8:	53 e4       	ldi	r21, 0x43	; 67
     2ca:	fc 01       	movw	r30, r24
     2cc:	60 81       	ld	r22, Z
     2ce:	71 81       	ldd	r23, Z+1	; 0x01
     2d0:	82 81       	ldd	r24, Z+2	; 0x02
     2d2:	93 81       	ldd	r25, Z+3	; 0x03
     2d4:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     2d8:	dc 01       	movw	r26, r24
     2da:	cb 01       	movw	r24, r22
     2dc:	f8 01       	movw	r30, r16
     2de:	80 83       	st	Z, r24
     2e0:	91 83       	std	Z+1, r25	; 0x01
     2e2:	a2 83       	std	Z+2, r26	; 0x02
     2e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     2e6:	ce 01       	movw	r24, r28
     2e8:	8d 5a       	subi	r24, 0xAD	; 173
     2ea:	9f 4f       	sbci	r25, 0xFF	; 255
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e8       	ldi	r20, 0x80	; 128
     2f2:	5f e3       	ldi	r21, 0x3F	; 63
     2f4:	fc 01       	movw	r30, r24
     2f6:	60 81       	ld	r22, Z
     2f8:	71 81       	ldd	r23, Z+1	; 0x01
     2fa:	82 81       	ldd	r24, Z+2	; 0x02
     2fc:	93 81       	ldd	r25, Z+3	; 0x03
     2fe:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     302:	88 23       	and	r24, r24
     304:	4c f4       	brge	.+18     	; 0x318 <ds18b20_reset+0x178>
		__ticks = 1;
     306:	ce 01       	movw	r24, r28
     308:	89 5a       	subi	r24, 0xA9	; 169
     30a:	9f 4f       	sbci	r25, 0xFF	; 255
     30c:	21 e0       	ldi	r18, 0x01	; 1
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	fc 01       	movw	r30, r24
     312:	31 83       	std	Z+1, r19	; 0x01
     314:	20 83       	st	Z, r18
     316:	6d c0       	rjmp	.+218    	; 0x3f2 <ds18b20_reset+0x252>
	else if (__tmp > 65535)
     318:	ce 01       	movw	r24, r28
     31a:	8d 5a       	subi	r24, 0xAD	; 173
     31c:	9f 4f       	sbci	r25, 0xFF	; 255
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	3f ef       	ldi	r19, 0xFF	; 255
     322:	4f e7       	ldi	r20, 0x7F	; 127
     324:	57 e4       	ldi	r21, 0x47	; 71
     326:	fc 01       	movw	r30, r24
     328:	60 81       	ld	r22, Z
     32a:	71 81       	ldd	r23, Z+1	; 0x01
     32c:	82 81       	ldd	r24, Z+2	; 0x02
     32e:	93 81       	ldd	r25, Z+3	; 0x03
     330:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     334:	18 16       	cp	r1, r24
     336:	0c f0       	brlt	.+2      	; 0x33a <ds18b20_reset+0x19a>
     338:	4a c0       	rjmp	.+148    	; 0x3ce <ds18b20_reset+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     33a:	ce 01       	movw	r24, r28
     33c:	81 5b       	subi	r24, 0xB1	; 177
     33e:	9f 4f       	sbci	r25, 0xFF	; 255
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	40 e2       	ldi	r20, 0x20	; 32
     346:	51 e4       	ldi	r21, 0x41	; 65
     348:	fc 01       	movw	r30, r24
     34a:	60 81       	ld	r22, Z
     34c:	71 81       	ldd	r23, Z+1	; 0x01
     34e:	82 81       	ldd	r24, Z+2	; 0x02
     350:	93 81       	ldd	r25, Z+3	; 0x03
     352:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     356:	dc 01       	movw	r26, r24
     358:	cb 01       	movw	r24, r22
     35a:	8e 01       	movw	r16, r28
     35c:	09 5a       	subi	r16, 0xA9	; 169
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	bc 01       	movw	r22, r24
     362:	cd 01       	movw	r24, r26
     364:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     368:	dc 01       	movw	r26, r24
     36a:	cb 01       	movw	r24, r22
     36c:	f8 01       	movw	r30, r16
     36e:	91 83       	std	Z+1, r25	; 0x01
     370:	80 83       	st	Z, r24
     372:	24 c0       	rjmp	.+72     	; 0x3bc <ds18b20_reset+0x21c>
     374:	ce 01       	movw	r24, r28
     376:	87 5a       	subi	r24, 0xA7	; 167
     378:	9f 4f       	sbci	r25, 0xFF	; 255
     37a:	29 e1       	ldi	r18, 0x19	; 25
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	fc 01       	movw	r30, r24
     380:	31 83       	std	Z+1, r19	; 0x01
     382:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     384:	ce 01       	movw	r24, r28
     386:	87 5a       	subi	r24, 0xA7	; 167
     388:	9f 4f       	sbci	r25, 0xFF	; 255
     38a:	fc 01       	movw	r30, r24
     38c:	80 81       	ld	r24, Z
     38e:	91 81       	ldd	r25, Z+1	; 0x01
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <ds18b20_reset+0x1f0>
     394:	9e 01       	movw	r18, r28
     396:	27 5a       	subi	r18, 0xA7	; 167
     398:	3f 4f       	sbci	r19, 0xFF	; 255
     39a:	f9 01       	movw	r30, r18
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3a0:	ce 01       	movw	r24, r28
     3a2:	89 5a       	subi	r24, 0xA9	; 169
     3a4:	9f 4f       	sbci	r25, 0xFF	; 255
     3a6:	9e 01       	movw	r18, r28
     3a8:	29 5a       	subi	r18, 0xA9	; 169
     3aa:	3f 4f       	sbci	r19, 0xFF	; 255
     3ac:	f9 01       	movw	r30, r18
     3ae:	20 81       	ld	r18, Z
     3b0:	31 81       	ldd	r19, Z+1	; 0x01
     3b2:	21 50       	subi	r18, 0x01	; 1
     3b4:	31 09       	sbc	r19, r1
     3b6:	fc 01       	movw	r30, r24
     3b8:	31 83       	std	Z+1, r19	; 0x01
     3ba:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3bc:	ce 01       	movw	r24, r28
     3be:	89 5a       	subi	r24, 0xA9	; 169
     3c0:	9f 4f       	sbci	r25, 0xFF	; 255
     3c2:	fc 01       	movw	r30, r24
     3c4:	80 81       	ld	r24, Z
     3c6:	91 81       	ldd	r25, Z+1	; 0x01
     3c8:	89 2b       	or	r24, r25
     3ca:	a1 f6       	brne	.-88     	; 0x374 <ds18b20_reset+0x1d4>
     3cc:	7b c0       	rjmp	.+246    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ce:	8e 01       	movw	r16, r28
     3d0:	09 5a       	subi	r16, 0xA9	; 169
     3d2:	1f 4f       	sbci	r17, 0xFF	; 255
     3d4:	ce 01       	movw	r24, r28
     3d6:	8d 5a       	subi	r24, 0xAD	; 173
     3d8:	9f 4f       	sbci	r25, 0xFF	; 255
     3da:	fc 01       	movw	r30, r24
     3dc:	60 81       	ld	r22, Z
     3de:	71 81       	ldd	r23, Z+1	; 0x01
     3e0:	82 81       	ldd	r24, Z+2	; 0x02
     3e2:	93 81       	ldd	r25, Z+3	; 0x03
     3e4:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     3e8:	dc 01       	movw	r26, r24
     3ea:	cb 01       	movw	r24, r22
     3ec:	f8 01       	movw	r30, r16
     3ee:	91 83       	std	Z+1, r25	; 0x01
     3f0:	80 83       	st	Z, r24
     3f2:	ce 01       	movw	r24, r28
     3f4:	85 5a       	subi	r24, 0xA5	; 165
     3f6:	9f 4f       	sbci	r25, 0xFF	; 255
     3f8:	9e 01       	movw	r18, r28
     3fa:	29 5a       	subi	r18, 0xA9	; 169
     3fc:	3f 4f       	sbci	r19, 0xFF	; 255
     3fe:	f9 01       	movw	r30, r18
     400:	20 81       	ld	r18, Z
     402:	31 81       	ldd	r19, Z+1	; 0x01
     404:	fc 01       	movw	r30, r24
     406:	31 83       	std	Z+1, r19	; 0x01
     408:	20 83       	st	Z, r18
     40a:	ce 01       	movw	r24, r28
     40c:	85 5a       	subi	r24, 0xA5	; 165
     40e:	9f 4f       	sbci	r25, 0xFF	; 255
     410:	fc 01       	movw	r30, r24
     412:	80 81       	ld	r24, Z
     414:	91 81       	ldd	r25, Z+1	; 0x01
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41a:	9e 01       	movw	r18, r28
     41c:	25 5a       	subi	r18, 0xA5	; 165
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
     420:	f9 01       	movw	r30, r18
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	4e c0       	rjmp	.+156    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     428:	ce 01       	movw	r24, r28
     42a:	8a 5b       	subi	r24, 0xBA	; 186
     42c:	9f 4f       	sbci	r25, 0xFF	; 255
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	4f e7       	ldi	r20, 0x7F	; 127
     434:	53 e4       	ldi	r21, 0x43	; 67
     436:	fc 01       	movw	r30, r24
     438:	60 81       	ld	r22, Z
     43a:	71 81       	ldd	r23, Z+1	; 0x01
     43c:	82 81       	ldd	r24, Z+2	; 0x02
     43e:	93 81       	ldd	r25, Z+3	; 0x03
     440:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     444:	18 16       	cp	r1, r24
     446:	6c f5       	brge	.+90     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     448:	8e 01       	movw	r16, r28
     44a:	03 5a       	subi	r16, 0xA3	; 163
     44c:	1f 4f       	sbci	r17, 0xFF	; 255
     44e:	ce 01       	movw	r24, r28
     450:	86 5b       	subi	r24, 0xB6	; 182
     452:	9f 4f       	sbci	r25, 0xFF	; 255
     454:	fc 01       	movw	r30, r24
     456:	60 81       	ld	r22, Z
     458:	71 81       	ldd	r23, Z+1	; 0x01
     45a:	82 81       	ldd	r24, Z+2	; 0x02
     45c:	93 81       	ldd	r25, Z+3	; 0x03
     45e:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     462:	dc 01       	movw	r26, r24
     464:	cb 01       	movw	r24, r22
     466:	f8 01       	movw	r30, r16
     468:	91 83       	std	Z+1, r25	; 0x01
     46a:	80 83       	st	Z, r24
     46c:	ce 01       	movw	r24, r28
     46e:	81 5a       	subi	r24, 0xA1	; 161
     470:	9f 4f       	sbci	r25, 0xFF	; 255
     472:	9e 01       	movw	r18, r28
     474:	23 5a       	subi	r18, 0xA3	; 163
     476:	3f 4f       	sbci	r19, 0xFF	; 255
     478:	f9 01       	movw	r30, r18
     47a:	20 81       	ld	r18, Z
     47c:	31 81       	ldd	r19, Z+1	; 0x01
     47e:	fc 01       	movw	r30, r24
     480:	31 83       	std	Z+1, r19	; 0x01
     482:	20 83       	st	Z, r18
     484:	ce 01       	movw	r24, r28
     486:	81 5a       	subi	r24, 0xA1	; 161
     488:	9f 4f       	sbci	r25, 0xFF	; 255
     48a:	fc 01       	movw	r30, r24
     48c:	80 81       	ld	r24, Z
     48e:	91 81       	ldd	r25, Z+1	; 0x01
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     494:	9e 01       	movw	r18, r28
     496:	21 5a       	subi	r18, 0xA1	; 161
     498:	3f 4f       	sbci	r19, 0xFF	; 255
     49a:	f9 01       	movw	r30, r18
     49c:	91 83       	std	Z+1, r25	; 0x01
     49e:	80 83       	st	Z, r24
     4a0:	28 c0       	rjmp	.+80     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4a2:	8e 01       	movw	r16, r28
     4a4:	02 5b       	subi	r16, 0xB2	; 178
     4a6:	1f 4f       	sbci	r17, 0xFF	; 255
     4a8:	ce 01       	movw	r24, r28
     4aa:	8a 5b       	subi	r24, 0xBA	; 186
     4ac:	9f 4f       	sbci	r25, 0xFF	; 255
     4ae:	fc 01       	movw	r30, r24
     4b0:	60 81       	ld	r22, Z
     4b2:	71 81       	ldd	r23, Z+1	; 0x01
     4b4:	82 81       	ldd	r24, Z+2	; 0x02
     4b6:	93 81       	ldd	r25, Z+3	; 0x03
     4b8:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	f8 01       	movw	r30, r16
     4c2:	80 83       	st	Z, r24
     4c4:	ce 01       	movw	r24, r28
     4c6:	8f 59       	subi	r24, 0x9F	; 159
     4c8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ca:	9e 01       	movw	r18, r28
     4cc:	22 5b       	subi	r18, 0xB2	; 178
     4ce:	3f 4f       	sbci	r19, 0xFF	; 255
     4d0:	f9 01       	movw	r30, r18
     4d2:	20 81       	ld	r18, Z
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4d8:	ce 01       	movw	r24, r28
     4da:	8f 59       	subi	r24, 0x9F	; 159
     4dc:	9f 4f       	sbci	r25, 0xFF	; 255
     4de:	fc 01       	movw	r30, r24
     4e0:	80 81       	ld	r24, Z
     4e2:	28 2f       	mov	r18, r24
     4e4:	2a 95       	dec	r18
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4e8:	ce 01       	movw	r24, r28
     4ea:	8f 59       	subi	r24, 0x9F	; 159
     4ec:	9f 4f       	sbci	r25, 0xFF	; 255
     4ee:	fc 01       	movw	r30, r24
     4f0:	20 83       	st	Z, r18
	_delay_us(480);

	//release line and wait for 60uS
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
     4f2:	87 e2       	ldi	r24, 0x27	; 39
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	27 e2       	ldi	r18, 0x27	; 39
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	f9 01       	movw	r30, r18
     4fc:	20 81       	ld	r18, Z
     4fe:	2e 7f       	andi	r18, 0xFE	; 254
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	a0 e7       	ldi	r26, 0x70	; 112
     50a:	b2 e4       	ldi	r27, 0x42	; 66
     50c:	8e 83       	std	Y+6, r24	; 0x06
     50e:	9f 83       	std	Y+7, r25	; 0x07
     510:	a8 87       	std	Y+8, r26	; 0x08
     512:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     514:	2b ea       	ldi	r18, 0xAB	; 171
     516:	3a ea       	ldi	r19, 0xAA	; 170
     518:	4a ea       	ldi	r20, 0xAA	; 170
     51a:	5e e3       	ldi	r21, 0x3E	; 62
     51c:	6e 81       	ldd	r22, Y+6	; 0x06
     51e:	7f 81       	ldd	r23, Y+7	; 0x07
     520:	88 85       	ldd	r24, Y+8	; 0x08
     522:	99 85       	ldd	r25, Y+9	; 0x09
     524:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     528:	dc 01       	movw	r26, r24
     52a:	cb 01       	movw	r24, r22
     52c:	8a a7       	std	Y+42, r24	; 0x2a
     52e:	9b a7       	std	Y+43, r25	; 0x2b
     530:	ac a7       	std	Y+44, r26	; 0x2c
     532:	bd a7       	std	Y+45, r27	; 0x2d
	__tmp2 = ((F_CPU) / 4e6) * __us;
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e8       	ldi	r20, 0x80	; 128
     53a:	5e e3       	ldi	r21, 0x3E	; 62
     53c:	6e 81       	ldd	r22, Y+6	; 0x06
     53e:	7f 81       	ldd	r23, Y+7	; 0x07
     540:	88 85       	ldd	r24, Y+8	; 0x08
     542:	99 85       	ldd	r25, Y+9	; 0x09
     544:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	8e a7       	std	Y+46, r24	; 0x2e
     54e:	9f a7       	std	Y+47, r25	; 0x2f
     550:	a8 ab       	std	Y+48, r26	; 0x30
     552:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e8       	ldi	r20, 0x80	; 128
     55a:	5f e3       	ldi	r21, 0x3F	; 63
     55c:	6a a5       	ldd	r22, Y+42	; 0x2a
     55e:	7b a5       	ldd	r23, Y+43	; 0x2b
     560:	8c a5       	ldd	r24, Y+44	; 0x2c
     562:	9d a5       	ldd	r25, Y+45	; 0x2d
     564:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     568:	88 23       	and	r24, r24
     56a:	1c f4       	brge	.+6      	; 0x572 <__stack+0x73>
		__ticks = 1;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	8a ab       	std	Y+50, r24	; 0x32
     570:	d0 c0       	rjmp	.+416    	; 0x712 <__stack+0x213>
	else if (__tmp2 > 65535)
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	3f ef       	ldi	r19, 0xFF	; 255
     576:	4f e7       	ldi	r20, 0x7F	; 127
     578:	57 e4       	ldi	r21, 0x47	; 71
     57a:	6e a5       	ldd	r22, Y+46	; 0x2e
     57c:	7f a5       	ldd	r23, Y+47	; 0x2f
     57e:	88 a9       	ldd	r24, Y+48	; 0x30
     580:	99 a9       	ldd	r25, Y+49	; 0x31
     582:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     586:	18 16       	cp	r1, r24
     588:	0c f0       	brlt	.+2      	; 0x58c <__stack+0x8d>
     58a:	85 c0       	rjmp	.+266    	; 0x696 <__stack+0x197>
	{
		_delay_ms(__us / 1000.0);
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	4a e7       	ldi	r20, 0x7A	; 122
     592:	54 e4       	ldi	r21, 0x44	; 68
     594:	6e 81       	ldd	r22, Y+6	; 0x06
     596:	7f 81       	ldd	r23, Y+7	; 0x07
     598:	88 85       	ldd	r24, Y+8	; 0x08
     59a:	99 85       	ldd	r25, Y+9	; 0x09
     59c:	0e 94 13 11 	call	0x2226	; 0x2226 <__divsf3>
     5a0:	dc 01       	movw	r26, r24
     5a2:	cb 01       	movw	r24, r22
     5a4:	8b ab       	std	Y+51, r24	; 0x33
     5a6:	9c ab       	std	Y+52, r25	; 0x34
     5a8:	ad ab       	std	Y+53, r26	; 0x35
     5aa:	be ab       	std	Y+54, r27	; 0x36

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	4a e7       	ldi	r20, 0x7A	; 122
     5b2:	53 e4       	ldi	r21, 0x43	; 67
     5b4:	6b a9       	ldd	r22, Y+51	; 0x33
     5b6:	7c a9       	ldd	r23, Y+52	; 0x34
     5b8:	8d a9       	ldd	r24, Y+53	; 0x35
     5ba:	9e a9       	ldd	r25, Y+54	; 0x36
     5bc:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	8f ab       	std	Y+55, r24	; 0x37
     5c6:	98 af       	std	Y+56, r25	; 0x38
     5c8:	a9 af       	std	Y+57, r26	; 0x39
     5ca:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e8       	ldi	r20, 0x80	; 128
     5d2:	5f e3       	ldi	r21, 0x3F	; 63
     5d4:	6f a9       	ldd	r22, Y+55	; 0x37
     5d6:	78 ad       	ldd	r23, Y+56	; 0x38
     5d8:	89 ad       	ldd	r24, Y+57	; 0x39
     5da:	9a ad       	ldd	r25, Y+58	; 0x3a
     5dc:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     5e0:	88 23       	and	r24, r24
     5e2:	2c f4       	brge	.+10     	; 0x5ee <__stack+0xef>
		__ticks = 1;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	9c af       	std	Y+60, r25	; 0x3c
     5ea:	8b af       	std	Y+59, r24	; 0x3b
     5ec:	3f c0       	rjmp	.+126    	; 0x66c <__stack+0x16d>
	else if (__tmp > 65535)
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	3f ef       	ldi	r19, 0xFF	; 255
     5f2:	4f e7       	ldi	r20, 0x7F	; 127
     5f4:	57 e4       	ldi	r21, 0x47	; 71
     5f6:	6f a9       	ldd	r22, Y+55	; 0x37
     5f8:	78 ad       	ldd	r23, Y+56	; 0x38
     5fa:	89 ad       	ldd	r24, Y+57	; 0x39
     5fc:	9a ad       	ldd	r25, Y+58	; 0x3a
     5fe:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     602:	18 16       	cp	r1, r24
     604:	4c f5       	brge	.+82     	; 0x658 <__stack+0x159>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	40 e2       	ldi	r20, 0x20	; 32
     60c:	51 e4       	ldi	r21, 0x41	; 65
     60e:	6b a9       	ldd	r22, Y+51	; 0x33
     610:	7c a9       	ldd	r23, Y+52	; 0x34
     612:	8d a9       	ldd	r24, Y+53	; 0x35
     614:	9e a9       	ldd	r25, Y+54	; 0x36
     616:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	bc 01       	movw	r22, r24
     620:	cd 01       	movw	r24, r26
     622:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	9c af       	std	Y+60, r25	; 0x3c
     62c:	8b af       	std	Y+59, r24	; 0x3b
     62e:	0f c0       	rjmp	.+30     	; 0x64e <__stack+0x14f>
     630:	89 e1       	ldi	r24, 0x19	; 25
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	9e af       	std	Y+62, r25	; 0x3e
     636:	8d af       	std	Y+61, r24	; 0x3d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     638:	8d ad       	ldd	r24, Y+61	; 0x3d
     63a:	9e ad       	ldd	r25, Y+62	; 0x3e
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <__stack+0x13d>
     640:	9e af       	std	Y+62, r25	; 0x3e
     642:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     644:	8b ad       	ldd	r24, Y+59	; 0x3b
     646:	9c ad       	ldd	r25, Y+60	; 0x3c
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	9c af       	std	Y+60, r25	; 0x3c
     64c:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     64e:	8b ad       	ldd	r24, Y+59	; 0x3b
     650:	9c ad       	ldd	r25, Y+60	; 0x3c
     652:	89 2b       	or	r24, r25
     654:	69 f7       	brne	.-38     	; 0x630 <__stack+0x131>
     656:	5d c0       	rjmp	.+186    	; 0x712 <__stack+0x213>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     658:	6f a9       	ldd	r22, Y+55	; 0x37
     65a:	78 ad       	ldd	r23, Y+56	; 0x38
     65c:	89 ad       	ldd	r24, Y+57	; 0x39
     65e:	9a ad       	ldd	r25, Y+58	; 0x3a
     660:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     664:	dc 01       	movw	r26, r24
     666:	cb 01       	movw	r24, r22
     668:	9c af       	std	Y+60, r25	; 0x3c
     66a:	8b af       	std	Y+59, r24	; 0x3b
     66c:	2b ad       	ldd	r18, Y+59	; 0x3b
     66e:	3c ad       	ldd	r19, Y+60	; 0x3c
     670:	ce 01       	movw	r24, r28
     672:	cf 96       	adiw	r24, 0x3f	; 63
     674:	fc 01       	movw	r30, r24
     676:	31 83       	std	Z+1, r19	; 0x01
     678:	20 83       	st	Z, r18
     67a:	ce 01       	movw	r24, r28
     67c:	cf 96       	adiw	r24, 0x3f	; 63
     67e:	fc 01       	movw	r30, r24
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <__stack+0x185>
     688:	9e 01       	movw	r18, r28
     68a:	21 5c       	subi	r18, 0xC1	; 193
     68c:	3f 4f       	sbci	r19, 0xFF	; 255
     68e:	f9 01       	movw	r30, r18
     690:	91 83       	std	Z+1, r25	; 0x01
     692:	80 83       	st	Z, r24
     694:	3e c0       	rjmp	.+124    	; 0x712 <__stack+0x213>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	4f e7       	ldi	r20, 0x7F	; 127
     69c:	53 e4       	ldi	r21, 0x43	; 67
     69e:	6a a5       	ldd	r22, Y+42	; 0x2a
     6a0:	7b a5       	ldd	r23, Y+43	; 0x2b
     6a2:	8c a5       	ldd	r24, Y+44	; 0x2c
     6a4:	9d a5       	ldd	r25, Y+45	; 0x2d
     6a6:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     6aa:	18 16       	cp	r1, r24
     6ac:	4c f5       	brge	.+82     	; 0x700 <__stack+0x201>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     6ae:	8e 01       	movw	r16, r28
     6b0:	0f 5b       	subi	r16, 0xBF	; 191
     6b2:	1f 4f       	sbci	r17, 0xFF	; 255
     6b4:	6e a5       	ldd	r22, Y+46	; 0x2e
     6b6:	7f a5       	ldd	r23, Y+47	; 0x2f
     6b8:	88 a9       	ldd	r24, Y+48	; 0x30
     6ba:	99 a9       	ldd	r25, Y+49	; 0x31
     6bc:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     6c0:	dc 01       	movw	r26, r24
     6c2:	cb 01       	movw	r24, r22
     6c4:	f8 01       	movw	r30, r16
     6c6:	91 83       	std	Z+1, r25	; 0x01
     6c8:	80 83       	st	Z, r24
     6ca:	ce 01       	movw	r24, r28
     6cc:	8d 5b       	subi	r24, 0xBD	; 189
     6ce:	9f 4f       	sbci	r25, 0xFF	; 255
     6d0:	9e 01       	movw	r18, r28
     6d2:	2f 5b       	subi	r18, 0xBF	; 191
     6d4:	3f 4f       	sbci	r19, 0xFF	; 255
     6d6:	f9 01       	movw	r30, r18
     6d8:	20 81       	ld	r18, Z
     6da:	31 81       	ldd	r19, Z+1	; 0x01
     6dc:	fc 01       	movw	r30, r24
     6de:	31 83       	std	Z+1, r19	; 0x01
     6e0:	20 83       	st	Z, r18
     6e2:	ce 01       	movw	r24, r28
     6e4:	8d 5b       	subi	r24, 0xBD	; 189
     6e6:	9f 4f       	sbci	r25, 0xFF	; 255
     6e8:	fc 01       	movw	r30, r24
     6ea:	80 81       	ld	r24, Z
     6ec:	91 81       	ldd	r25, Z+1	; 0x01
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <__stack+0x1ef>
     6f2:	9e 01       	movw	r18, r28
     6f4:	2d 5b       	subi	r18, 0xBD	; 189
     6f6:	3f 4f       	sbci	r19, 0xFF	; 255
     6f8:	f9 01       	movw	r30, r18
     6fa:	91 83       	std	Z+1, r25	; 0x01
     6fc:	80 83       	st	Z, r24
     6fe:	1c c0       	rjmp	.+56     	; 0x738 <__stack+0x239>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     700:	6a a5       	ldd	r22, Y+42	; 0x2a
     702:	7b a5       	ldd	r23, Y+43	; 0x2b
     704:	8c a5       	ldd	r24, Y+44	; 0x2c
     706:	9d a5       	ldd	r25, Y+45	; 0x2d
     708:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	8a ab       	std	Y+50, r24	; 0x32
     712:	ce 01       	movw	r24, r28
     714:	8b 5b       	subi	r24, 0xBB	; 187
     716:	9f 4f       	sbci	r25, 0xFF	; 255
     718:	2a a9       	ldd	r18, Y+50	; 0x32
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     71e:	ce 01       	movw	r24, r28
     720:	8b 5b       	subi	r24, 0xBB	; 187
     722:	9f 4f       	sbci	r25, 0xFF	; 255
     724:	fc 01       	movw	r30, r24
     726:	80 81       	ld	r24, Z
     728:	28 2f       	mov	r18, r24
     72a:	2a 95       	dec	r18
     72c:	f1 f7       	brne	.-4      	; 0x72a <__stack+0x22b>
     72e:	ce 01       	movw	r24, r28
     730:	8b 5b       	subi	r24, 0xBB	; 187
     732:	9f 4f       	sbci	r25, 0xFF	; 255
     734:	fc 01       	movw	r30, r24
     736:	20 83       	st	Z, r18
	_delay_us(60);

	//get value and wait 420us
	i = (DS18B20_PIN & (1<<DS18B20_DQ));
     738:	86 e2       	ldi	r24, 0x26	; 38
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	fc 01       	movw	r30, r24
     73e:	80 81       	ld	r24, Z
     740:	81 70       	andi	r24, 0x01	; 1
     742:	8d 83       	std	Y+5, r24	; 0x05
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a2 ed       	ldi	r26, 0xD2	; 210
     74a:	b3 e4       	ldi	r27, 0x43	; 67
     74c:	8a 87       	std	Y+10, r24	; 0x0a
     74e:	9b 87       	std	Y+11, r25	; 0x0b
     750:	ac 87       	std	Y+12, r26	; 0x0c
     752:	bd 87       	std	Y+13, r27	; 0x0d
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     754:	2b ea       	ldi	r18, 0xAB	; 171
     756:	3a ea       	ldi	r19, 0xAA	; 170
     758:	4a ea       	ldi	r20, 0xAA	; 170
     75a:	5e e3       	ldi	r21, 0x3E	; 62
     75c:	6a 85       	ldd	r22, Y+10	; 0x0a
     75e:	7b 85       	ldd	r23, Y+11	; 0x0b
     760:	8c 85       	ldd	r24, Y+12	; 0x0c
     762:	9d 85       	ldd	r25, Y+13	; 0x0d
     764:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     768:	dc 01       	movw	r26, r24
     76a:	cb 01       	movw	r24, r22
     76c:	8e 87       	std	Y+14, r24	; 0x0e
     76e:	9f 87       	std	Y+15, r25	; 0x0f
     770:	a8 8b       	std	Y+16, r26	; 0x10
     772:	b9 8b       	std	Y+17, r27	; 0x11
	__tmp2 = ((F_CPU) / 4e6) * __us;
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	40 e8       	ldi	r20, 0x80	; 128
     77a:	5e e3       	ldi	r21, 0x3E	; 62
     77c:	6a 85       	ldd	r22, Y+10	; 0x0a
     77e:	7b 85       	ldd	r23, Y+11	; 0x0b
     780:	8c 85       	ldd	r24, Y+12	; 0x0c
     782:	9d 85       	ldd	r25, Y+13	; 0x0d
     784:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	8a 8b       	std	Y+18, r24	; 0x12
     78e:	9b 8b       	std	Y+19, r25	; 0x13
     790:	ac 8b       	std	Y+20, r26	; 0x14
     792:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e8       	ldi	r20, 0x80	; 128
     79a:	5f e3       	ldi	r21, 0x3F	; 63
     79c:	6e 85       	ldd	r22, Y+14	; 0x0e
     79e:	7f 85       	ldd	r23, Y+15	; 0x0f
     7a0:	88 89       	ldd	r24, Y+16	; 0x10
     7a2:	99 89       	ldd	r25, Y+17	; 0x11
     7a4:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     7a8:	88 23       	and	r24, r24
     7aa:	1c f4       	brge	.+6      	; 0x7b2 <__stack+0x2b3>
		__ticks = 1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	8e 8b       	std	Y+22, r24	; 0x16
     7b0:	b2 c0       	rjmp	.+356    	; 0x916 <__stack+0x417>
	else if (__tmp2 > 65535)
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	3f ef       	ldi	r19, 0xFF	; 255
     7b6:	4f e7       	ldi	r20, 0x7F	; 127
     7b8:	57 e4       	ldi	r21, 0x47	; 71
     7ba:	6a 89       	ldd	r22, Y+18	; 0x12
     7bc:	7b 89       	ldd	r23, Y+19	; 0x13
     7be:	8c 89       	ldd	r24, Y+20	; 0x14
     7c0:	9d 89       	ldd	r25, Y+21	; 0x15
     7c2:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     7c6:	18 16       	cp	r1, r24
     7c8:	0c f0       	brlt	.+2      	; 0x7cc <__stack+0x2cd>
     7ca:	7b c0       	rjmp	.+246    	; 0x8c2 <__stack+0x3c3>
	{
		_delay_ms(__us / 1000.0);
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	4a e7       	ldi	r20, 0x7A	; 122
     7d2:	54 e4       	ldi	r21, 0x44	; 68
     7d4:	6a 85       	ldd	r22, Y+10	; 0x0a
     7d6:	7b 85       	ldd	r23, Y+11	; 0x0b
     7d8:	8c 85       	ldd	r24, Y+12	; 0x0c
     7da:	9d 85       	ldd	r25, Y+13	; 0x0d
     7dc:	0e 94 13 11 	call	0x2226	; 0x2226 <__divsf3>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	8f 8b       	std	Y+23, r24	; 0x17
     7e6:	98 8f       	std	Y+24, r25	; 0x18
     7e8:	a9 8f       	std	Y+25, r26	; 0x19
     7ea:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	4a e7       	ldi	r20, 0x7A	; 122
     7f2:	53 e4       	ldi	r21, 0x43	; 67
     7f4:	6f 89       	ldd	r22, Y+23	; 0x17
     7f6:	78 8d       	ldd	r23, Y+24	; 0x18
     7f8:	89 8d       	ldd	r24, Y+25	; 0x19
     7fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7fc:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	8b 8f       	std	Y+27, r24	; 0x1b
     806:	9c 8f       	std	Y+28, r25	; 0x1c
     808:	ad 8f       	std	Y+29, r26	; 0x1d
     80a:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	40 e8       	ldi	r20, 0x80	; 128
     812:	5f e3       	ldi	r21, 0x3F	; 63
     814:	6b 8d       	ldd	r22, Y+27	; 0x1b
     816:	7c 8d       	ldd	r23, Y+28	; 0x1c
     818:	8d 8d       	ldd	r24, Y+29	; 0x1d
     81a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     81c:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     820:	88 23       	and	r24, r24
     822:	2c f4       	brge	.+10     	; 0x82e <__stack+0x32f>
		__ticks = 1;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	98 a3       	std	Y+32, r25	; 0x20
     82a:	8f 8f       	std	Y+31, r24	; 0x1f
     82c:	3f c0       	rjmp	.+126    	; 0x8ac <__stack+0x3ad>
	else if (__tmp > 65535)
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	3f ef       	ldi	r19, 0xFF	; 255
     832:	4f e7       	ldi	r20, 0x7F	; 127
     834:	57 e4       	ldi	r21, 0x47	; 71
     836:	6b 8d       	ldd	r22, Y+27	; 0x1b
     838:	7c 8d       	ldd	r23, Y+28	; 0x1c
     83a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     83c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     83e:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     842:	18 16       	cp	r1, r24
     844:	4c f5       	brge	.+82     	; 0x898 <__stack+0x399>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e2       	ldi	r20, 0x20	; 32
     84c:	51 e4       	ldi	r21, 0x41	; 65
     84e:	6f 89       	ldd	r22, Y+23	; 0x17
     850:	78 8d       	ldd	r23, Y+24	; 0x18
     852:	89 8d       	ldd	r24, Y+25	; 0x19
     854:	9a 8d       	ldd	r25, Y+26	; 0x1a
     856:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
     85e:	bc 01       	movw	r22, r24
     860:	cd 01       	movw	r24, r26
     862:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     866:	dc 01       	movw	r26, r24
     868:	cb 01       	movw	r24, r22
     86a:	98 a3       	std	Y+32, r25	; 0x20
     86c:	8f 8f       	std	Y+31, r24	; 0x1f
     86e:	0f c0       	rjmp	.+30     	; 0x88e <__stack+0x38f>
     870:	89 e1       	ldi	r24, 0x19	; 25
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	9a a3       	std	Y+34, r25	; 0x22
     876:	89 a3       	std	Y+33, r24	; 0x21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     878:	89 a1       	ldd	r24, Y+33	; 0x21
     87a:	9a a1       	ldd	r25, Y+34	; 0x22
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <__stack+0x37d>
     880:	9a a3       	std	Y+34, r25	; 0x22
     882:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     884:	8f 8d       	ldd	r24, Y+31	; 0x1f
     886:	98 a1       	ldd	r25, Y+32	; 0x20
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	98 a3       	std	Y+32, r25	; 0x20
     88c:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     88e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     890:	98 a1       	ldd	r25, Y+32	; 0x20
     892:	89 2b       	or	r24, r25
     894:	69 f7       	brne	.-38     	; 0x870 <__stack+0x371>
     896:	3f c0       	rjmp	.+126    	; 0x916 <__stack+0x417>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     898:	6b 8d       	ldd	r22, Y+27	; 0x1b
     89a:	7c 8d       	ldd	r23, Y+28	; 0x1c
     89c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     89e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8a0:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     8a4:	dc 01       	movw	r26, r24
     8a6:	cb 01       	movw	r24, r22
     8a8:	98 a3       	std	Y+32, r25	; 0x20
     8aa:	8f 8f       	std	Y+31, r24	; 0x1f
     8ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8ae:	98 a1       	ldd	r25, Y+32	; 0x20
     8b0:	9c a3       	std	Y+36, r25	; 0x24
     8b2:	8b a3       	std	Y+35, r24	; 0x23
     8b4:	8b a1       	ldd	r24, Y+35	; 0x23
     8b6:	9c a1       	ldd	r25, Y+36	; 0x24
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <__stack+0x3b9>
     8bc:	9c a3       	std	Y+36, r25	; 0x24
     8be:	8b a3       	std	Y+35, r24	; 0x23
     8c0:	2a c0       	rjmp	.+84     	; 0x916 <__stack+0x417>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	4f e7       	ldi	r20, 0x7F	; 127
     8c8:	53 e4       	ldi	r21, 0x43	; 67
     8ca:	6e 85       	ldd	r22, Y+14	; 0x0e
     8cc:	7f 85       	ldd	r23, Y+15	; 0x0f
     8ce:	88 89       	ldd	r24, Y+16	; 0x10
     8d0:	99 89       	ldd	r25, Y+17	; 0x11
     8d2:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     8d6:	18 16       	cp	r1, r24
     8d8:	ac f4       	brge	.+42     	; 0x904 <__stack+0x405>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     8da:	6a 89       	ldd	r22, Y+18	; 0x12
     8dc:	7b 89       	ldd	r23, Y+19	; 0x13
     8de:	8c 89       	ldd	r24, Y+20	; 0x14
     8e0:	9d 89       	ldd	r25, Y+21	; 0x15
     8e2:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     8e6:	dc 01       	movw	r26, r24
     8e8:	cb 01       	movw	r24, r22
     8ea:	9e a3       	std	Y+38, r25	; 0x26
     8ec:	8d a3       	std	Y+37, r24	; 0x25
     8ee:	8d a1       	ldd	r24, Y+37	; 0x25
     8f0:	9e a1       	ldd	r25, Y+38	; 0x26
     8f2:	98 a7       	std	Y+40, r25	; 0x28
     8f4:	8f a3       	std	Y+39, r24	; 0x27
     8f6:	8f a1       	ldd	r24, Y+39	; 0x27
     8f8:	98 a5       	ldd	r25, Y+40	; 0x28
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <__stack+0x3fb>
     8fe:	98 a7       	std	Y+40, r25	; 0x28
     900:	8f a3       	std	Y+39, r24	; 0x27
     902:	0f c0       	rjmp	.+30     	; 0x922 <__stack+0x423>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     904:	6e 85       	ldd	r22, Y+14	; 0x0e
     906:	7f 85       	ldd	r23, Y+15	; 0x0f
     908:	88 89       	ldd	r24, Y+16	; 0x10
     90a:	99 89       	ldd	r25, Y+17	; 0x11
     90c:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     910:	dc 01       	movw	r26, r24
     912:	cb 01       	movw	r24, r22
     914:	8e 8b       	std	Y+22, r24	; 0x16
     916:	8e 89       	ldd	r24, Y+22	; 0x16
     918:	89 a7       	std	Y+41, r24	; 0x29
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     91a:	89 a5       	ldd	r24, Y+41	; 0x29
     91c:	8a 95       	dec	r24
     91e:	f1 f7       	brne	.-4      	; 0x91c <__stack+0x41d>
     920:	89 a7       	std	Y+41, r24	; 0x29
	_delay_us(420);

	//return the read value, 0=ok, 1=error
	return i;
     922:	8d 81       	ldd	r24, Y+5	; 0x05
}
     924:	cf 59       	subi	r28, 0x9F	; 159
     926:	df 4f       	sbci	r29, 0xFF	; 255
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	08 95       	ret

0000093c <ds18b20_writebit>:

/*
 * write one bit
 */
void ds18b20_writebit(uint8_t bit){
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	c1 54       	subi	r28, 0x41	; 65
     946:	d1 09       	sbc	r29, r1
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
     952:	9e 01       	movw	r18, r28
     954:	2f 5b       	subi	r18, 0xBF	; 191
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	f9 01       	movw	r30, r18
     95a:	80 83       	st	Z, r24
	//low for 1uS
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
     95c:	88 e2       	ldi	r24, 0x28	; 40
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	28 e2       	ldi	r18, 0x28	; 40
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	f9 01       	movw	r30, r18
     966:	20 81       	ld	r18, Z
     968:	2e 7f       	andi	r18, 0xFE	; 254
     96a:	fc 01       	movw	r30, r24
     96c:	20 83       	st	Z, r18
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
     96e:	87 e2       	ldi	r24, 0x27	; 39
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	27 e2       	ldi	r18, 0x27	; 39
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	f9 01       	movw	r30, r18
     978:	20 81       	ld	r18, Z
     97a:	21 60       	ori	r18, 0x01	; 1
     97c:	fc 01       	movw	r30, r24
     97e:	20 83       	st	Z, r18
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e8       	ldi	r26, 0x80	; 128
     986:	bf e3       	ldi	r27, 0x3F	; 63
     988:	8d 83       	std	Y+5, r24	; 0x05
     98a:	9e 83       	std	Y+6, r25	; 0x06
     98c:	af 83       	std	Y+7, r26	; 0x07
     98e:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     990:	2b ea       	ldi	r18, 0xAB	; 171
     992:	3a ea       	ldi	r19, 0xAA	; 170
     994:	4a ea       	ldi	r20, 0xAA	; 170
     996:	5e e3       	ldi	r21, 0x3E	; 62
     998:	6d 81       	ldd	r22, Y+5	; 0x05
     99a:	7e 81       	ldd	r23, Y+6	; 0x06
     99c:	8f 81       	ldd	r24, Y+7	; 0x07
     99e:	98 85       	ldd	r25, Y+8	; 0x08
     9a0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     9a4:	dc 01       	movw	r26, r24
     9a6:	cb 01       	movw	r24, r22
     9a8:	89 87       	std	Y+9, r24	; 0x09
     9aa:	9a 87       	std	Y+10, r25	; 0x0a
     9ac:	ab 87       	std	Y+11, r26	; 0x0b
     9ae:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e8       	ldi	r20, 0x80	; 128
     9b6:	5e e3       	ldi	r21, 0x3E	; 62
     9b8:	6d 81       	ldd	r22, Y+5	; 0x05
     9ba:	7e 81       	ldd	r23, Y+6	; 0x06
     9bc:	8f 81       	ldd	r24, Y+7	; 0x07
     9be:	98 85       	ldd	r25, Y+8	; 0x08
     9c0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     9c4:	dc 01       	movw	r26, r24
     9c6:	cb 01       	movw	r24, r22
     9c8:	8d 87       	std	Y+13, r24	; 0x0d
     9ca:	9e 87       	std	Y+14, r25	; 0x0e
     9cc:	af 87       	std	Y+15, r26	; 0x0f
     9ce:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	69 85       	ldd	r22, Y+9	; 0x09
     9da:	7a 85       	ldd	r23, Y+10	; 0x0a
     9dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     9de:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e0:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     9e4:	88 23       	and	r24, r24
     9e6:	1c f4       	brge	.+6      	; 0x9ee <ds18b20_writebit+0xb2>
		__ticks = 1;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	89 8b       	std	Y+17, r24	; 0x11
     9ec:	b2 c0       	rjmp	.+356    	; 0xb52 <ds18b20_writebit+0x216>
	else if (__tmp2 > 65535)
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	3f ef       	ldi	r19, 0xFF	; 255
     9f2:	4f e7       	ldi	r20, 0x7F	; 127
     9f4:	57 e4       	ldi	r21, 0x47	; 71
     9f6:	6d 85       	ldd	r22, Y+13	; 0x0d
     9f8:	7e 85       	ldd	r23, Y+14	; 0x0e
     9fa:	8f 85       	ldd	r24, Y+15	; 0x0f
     9fc:	98 89       	ldd	r25, Y+16	; 0x10
     9fe:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     a02:	18 16       	cp	r1, r24
     a04:	0c f0       	brlt	.+2      	; 0xa08 <ds18b20_writebit+0xcc>
     a06:	7b c0       	rjmp	.+246    	; 0xafe <ds18b20_writebit+0x1c2>
	{
		_delay_ms(__us / 1000.0);
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	4a e7       	ldi	r20, 0x7A	; 122
     a0e:	54 e4       	ldi	r21, 0x44	; 68
     a10:	6d 81       	ldd	r22, Y+5	; 0x05
     a12:	7e 81       	ldd	r23, Y+6	; 0x06
     a14:	8f 81       	ldd	r24, Y+7	; 0x07
     a16:	98 85       	ldd	r25, Y+8	; 0x08
     a18:	0e 94 13 11 	call	0x2226	; 0x2226 <__divsf3>
     a1c:	dc 01       	movw	r26, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	8a 8b       	std	Y+18, r24	; 0x12
     a22:	9b 8b       	std	Y+19, r25	; 0x13
     a24:	ac 8b       	std	Y+20, r26	; 0x14
     a26:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	4a e7       	ldi	r20, 0x7A	; 122
     a2e:	53 e4       	ldi	r21, 0x43	; 67
     a30:	6a 89       	ldd	r22, Y+18	; 0x12
     a32:	7b 89       	ldd	r23, Y+19	; 0x13
     a34:	8c 89       	ldd	r24, Y+20	; 0x14
     a36:	9d 89       	ldd	r25, Y+21	; 0x15
     a38:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     a3c:	dc 01       	movw	r26, r24
     a3e:	cb 01       	movw	r24, r22
     a40:	8e 8b       	std	Y+22, r24	; 0x16
     a42:	9f 8b       	std	Y+23, r25	; 0x17
     a44:	a8 8f       	std	Y+24, r26	; 0x18
     a46:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e8       	ldi	r20, 0x80	; 128
     a4e:	5f e3       	ldi	r21, 0x3F	; 63
     a50:	6e 89       	ldd	r22, Y+22	; 0x16
     a52:	7f 89       	ldd	r23, Y+23	; 0x17
     a54:	88 8d       	ldd	r24, Y+24	; 0x18
     a56:	99 8d       	ldd	r25, Y+25	; 0x19
     a58:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     a5c:	88 23       	and	r24, r24
     a5e:	2c f4       	brge	.+10     	; 0xa6a <ds18b20_writebit+0x12e>
		__ticks = 1;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	9b 8f       	std	Y+27, r25	; 0x1b
     a66:	8a 8f       	std	Y+26, r24	; 0x1a
     a68:	3f c0       	rjmp	.+126    	; 0xae8 <ds18b20_writebit+0x1ac>
	else if (__tmp > 65535)
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	3f ef       	ldi	r19, 0xFF	; 255
     a6e:	4f e7       	ldi	r20, 0x7F	; 127
     a70:	57 e4       	ldi	r21, 0x47	; 71
     a72:	6e 89       	ldd	r22, Y+22	; 0x16
     a74:	7f 89       	ldd	r23, Y+23	; 0x17
     a76:	88 8d       	ldd	r24, Y+24	; 0x18
     a78:	99 8d       	ldd	r25, Y+25	; 0x19
     a7a:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     a7e:	18 16       	cp	r1, r24
     a80:	4c f5       	brge	.+82     	; 0xad4 <ds18b20_writebit+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e2       	ldi	r20, 0x20	; 32
     a88:	51 e4       	ldi	r21, 0x41	; 65
     a8a:	6a 89       	ldd	r22, Y+18	; 0x12
     a8c:	7b 89       	ldd	r23, Y+19	; 0x13
     a8e:	8c 89       	ldd	r24, Y+20	; 0x14
     a90:	9d 89       	ldd	r25, Y+21	; 0x15
     a92:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	bc 01       	movw	r22, r24
     a9c:	cd 01       	movw	r24, r26
     a9e:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	9b 8f       	std	Y+27, r25	; 0x1b
     aa8:	8a 8f       	std	Y+26, r24	; 0x1a
     aaa:	0f c0       	rjmp	.+30     	; 0xaca <ds18b20_writebit+0x18e>
     aac:	89 e1       	ldi	r24, 0x19	; 25
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	9d 8f       	std	Y+29, r25	; 0x1d
     ab2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ab4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ab6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	f1 f7       	brne	.-4      	; 0xab8 <ds18b20_writebit+0x17c>
     abc:	9d 8f       	std	Y+29, r25	; 0x1d
     abe:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ac2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	9b 8f       	std	Y+27, r25	; 0x1b
     ac8:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aca:	8a 8d       	ldd	r24, Y+26	; 0x1a
     acc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ace:	89 2b       	or	r24, r25
     ad0:	69 f7       	brne	.-38     	; 0xaac <ds18b20_writebit+0x170>
     ad2:	3f c0       	rjmp	.+126    	; 0xb52 <ds18b20_writebit+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ad4:	6e 89       	ldd	r22, Y+22	; 0x16
     ad6:	7f 89       	ldd	r23, Y+23	; 0x17
     ad8:	88 8d       	ldd	r24, Y+24	; 0x18
     ada:	99 8d       	ldd	r25, Y+25	; 0x19
     adc:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     ae0:	dc 01       	movw	r26, r24
     ae2:	cb 01       	movw	r24, r22
     ae4:	9b 8f       	std	Y+27, r25	; 0x1b
     ae6:	8a 8f       	std	Y+26, r24	; 0x1a
     ae8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     aea:	9b 8d       	ldd	r25, Y+27	; 0x1b
     aec:	9f 8f       	std	Y+31, r25	; 0x1f
     aee:	8e 8f       	std	Y+30, r24	; 0x1e
     af0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     af2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	f1 f7       	brne	.-4      	; 0xaf4 <ds18b20_writebit+0x1b8>
     af8:	9f 8f       	std	Y+31, r25	; 0x1f
     afa:	8e 8f       	std	Y+30, r24	; 0x1e
     afc:	2a c0       	rjmp	.+84     	; 0xb52 <ds18b20_writebit+0x216>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	4f e7       	ldi	r20, 0x7F	; 127
     b04:	53 e4       	ldi	r21, 0x43	; 67
     b06:	69 85       	ldd	r22, Y+9	; 0x09
     b08:	7a 85       	ldd	r23, Y+10	; 0x0a
     b0a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b0c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b0e:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     b12:	18 16       	cp	r1, r24
     b14:	ac f4       	brge	.+42     	; 0xb40 <ds18b20_writebit+0x204>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     b16:	6d 85       	ldd	r22, Y+13	; 0x0d
     b18:	7e 85       	ldd	r23, Y+14	; 0x0e
     b1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b1c:	98 89       	ldd	r25, Y+16	; 0x10
     b1e:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	99 a3       	std	Y+33, r25	; 0x21
     b28:	88 a3       	std	Y+32, r24	; 0x20
     b2a:	88 a1       	ldd	r24, Y+32	; 0x20
     b2c:	99 a1       	ldd	r25, Y+33	; 0x21
     b2e:	9b a3       	std	Y+35, r25	; 0x23
     b30:	8a a3       	std	Y+34, r24	; 0x22
     b32:	8a a1       	ldd	r24, Y+34	; 0x22
     b34:	9b a1       	ldd	r25, Y+35	; 0x23
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <ds18b20_writebit+0x1fa>
     b3a:	9b a3       	std	Y+35, r25	; 0x23
     b3c:	8a a3       	std	Y+34, r24	; 0x22
     b3e:	0f c0       	rjmp	.+30     	; 0xb5e <ds18b20_writebit+0x222>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b40:	69 85       	ldd	r22, Y+9	; 0x09
     b42:	7a 85       	ldd	r23, Y+10	; 0x0a
     b44:	8b 85       	ldd	r24, Y+11	; 0x0b
     b46:	9c 85       	ldd	r25, Y+12	; 0x0c
     b48:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	89 8b       	std	Y+17, r24	; 0x11
     b52:	89 89       	ldd	r24, Y+17	; 0x11
     b54:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b56:	8c a1       	ldd	r24, Y+36	; 0x24
     b58:	8a 95       	dec	r24
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <ds18b20_writebit+0x21c>
     b5c:	8c a3       	std	Y+36, r24	; 0x24
	_delay_us(1);

	//if we want to write 1, release the line (if not will keep low)
	if(bit)
     b5e:	ce 01       	movw	r24, r28
     b60:	8f 5b       	subi	r24, 0xBF	; 191
     b62:	9f 4f       	sbci	r25, 0xFF	; 255
     b64:	fc 01       	movw	r30, r24
     b66:	80 81       	ld	r24, Z
     b68:	88 23       	and	r24, r24
     b6a:	49 f0       	breq	.+18     	; 0xb7e <ds18b20_writebit+0x242>
		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
     b6c:	87 e2       	ldi	r24, 0x27	; 39
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	27 e2       	ldi	r18, 0x27	; 39
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	f9 01       	movw	r30, r18
     b76:	20 81       	ld	r18, Z
     b78:	2e 7f       	andi	r18, 0xFE	; 254
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	a0 e7       	ldi	r26, 0x70	; 112
     b84:	b2 e4       	ldi	r27, 0x42	; 66
     b86:	89 83       	std	Y+1, r24	; 0x01
     b88:	9a 83       	std	Y+2, r25	; 0x02
     b8a:	ab 83       	std	Y+3, r26	; 0x03
     b8c:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     b8e:	2b ea       	ldi	r18, 0xAB	; 171
     b90:	3a ea       	ldi	r19, 0xAA	; 170
     b92:	4a ea       	ldi	r20, 0xAA	; 170
     b94:	5e e3       	ldi	r21, 0x3E	; 62
     b96:	69 81       	ldd	r22, Y+1	; 0x01
     b98:	7a 81       	ldd	r23, Y+2	; 0x02
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	9c 81       	ldd	r25, Y+4	; 0x04
     b9e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     ba2:	dc 01       	movw	r26, r24
     ba4:	cb 01       	movw	r24, r22
     ba6:	8d a3       	std	Y+37, r24	; 0x25
     ba8:	9e a3       	std	Y+38, r25	; 0x26
     baa:	af a3       	std	Y+39, r26	; 0x27
     bac:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e8       	ldi	r20, 0x80	; 128
     bb4:	5e e3       	ldi	r21, 0x3E	; 62
     bb6:	69 81       	ldd	r22, Y+1	; 0x01
     bb8:	7a 81       	ldd	r23, Y+2	; 0x02
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	9c 81       	ldd	r25, Y+4	; 0x04
     bbe:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	89 a7       	std	Y+41, r24	; 0x29
     bc8:	9a a7       	std	Y+42, r25	; 0x2a
     bca:	ab a7       	std	Y+43, r26	; 0x2b
     bcc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e8       	ldi	r20, 0x80	; 128
     bd4:	5f e3       	ldi	r21, 0x3F	; 63
     bd6:	6d a1       	ldd	r22, Y+37	; 0x25
     bd8:	7e a1       	ldd	r23, Y+38	; 0x26
     bda:	8f a1       	ldd	r24, Y+39	; 0x27
     bdc:	98 a5       	ldd	r25, Y+40	; 0x28
     bde:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     be2:	88 23       	and	r24, r24
     be4:	1c f4       	brge	.+6      	; 0xbec <ds18b20_writebit+0x2b0>
		__ticks = 1;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	8d a7       	std	Y+45, r24	; 0x2d
     bea:	b2 c0       	rjmp	.+356    	; 0xd50 <ds18b20_writebit+0x414>
	else if (__tmp2 > 65535)
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	4f e7       	ldi	r20, 0x7F	; 127
     bf2:	57 e4       	ldi	r21, 0x47	; 71
     bf4:	69 a5       	ldd	r22, Y+41	; 0x29
     bf6:	7a a5       	ldd	r23, Y+42	; 0x2a
     bf8:	8b a5       	ldd	r24, Y+43	; 0x2b
     bfa:	9c a5       	ldd	r25, Y+44	; 0x2c
     bfc:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     c00:	18 16       	cp	r1, r24
     c02:	0c f0       	brlt	.+2      	; 0xc06 <ds18b20_writebit+0x2ca>
     c04:	7b c0       	rjmp	.+246    	; 0xcfc <ds18b20_writebit+0x3c0>
	{
		_delay_ms(__us / 1000.0);
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	4a e7       	ldi	r20, 0x7A	; 122
     c0c:	54 e4       	ldi	r21, 0x44	; 68
     c0e:	69 81       	ldd	r22, Y+1	; 0x01
     c10:	7a 81       	ldd	r23, Y+2	; 0x02
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	9c 81       	ldd	r25, Y+4	; 0x04
     c16:	0e 94 13 11 	call	0x2226	; 0x2226 <__divsf3>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	8e a7       	std	Y+46, r24	; 0x2e
     c20:	9f a7       	std	Y+47, r25	; 0x2f
     c22:	a8 ab       	std	Y+48, r26	; 0x30
     c24:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	4a e7       	ldi	r20, 0x7A	; 122
     c2c:	53 e4       	ldi	r21, 0x43	; 67
     c2e:	6e a5       	ldd	r22, Y+46	; 0x2e
     c30:	7f a5       	ldd	r23, Y+47	; 0x2f
     c32:	88 a9       	ldd	r24, Y+48	; 0x30
     c34:	99 a9       	ldd	r25, Y+49	; 0x31
     c36:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	8a ab       	std	Y+50, r24	; 0x32
     c40:	9b ab       	std	Y+51, r25	; 0x33
     c42:	ac ab       	std	Y+52, r26	; 0x34
     c44:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e8       	ldi	r20, 0x80	; 128
     c4c:	5f e3       	ldi	r21, 0x3F	; 63
     c4e:	6a a9       	ldd	r22, Y+50	; 0x32
     c50:	7b a9       	ldd	r23, Y+51	; 0x33
     c52:	8c a9       	ldd	r24, Y+52	; 0x34
     c54:	9d a9       	ldd	r25, Y+53	; 0x35
     c56:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     c5a:	88 23       	and	r24, r24
     c5c:	2c f4       	brge	.+10     	; 0xc68 <ds18b20_writebit+0x32c>
		__ticks = 1;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	9f ab       	std	Y+55, r25	; 0x37
     c64:	8e ab       	std	Y+54, r24	; 0x36
     c66:	3f c0       	rjmp	.+126    	; 0xce6 <ds18b20_writebit+0x3aa>
	else if (__tmp > 65535)
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	3f ef       	ldi	r19, 0xFF	; 255
     c6c:	4f e7       	ldi	r20, 0x7F	; 127
     c6e:	57 e4       	ldi	r21, 0x47	; 71
     c70:	6a a9       	ldd	r22, Y+50	; 0x32
     c72:	7b a9       	ldd	r23, Y+51	; 0x33
     c74:	8c a9       	ldd	r24, Y+52	; 0x34
     c76:	9d a9       	ldd	r25, Y+53	; 0x35
     c78:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     c7c:	18 16       	cp	r1, r24
     c7e:	4c f5       	brge	.+82     	; 0xcd2 <ds18b20_writebit+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e2       	ldi	r20, 0x20	; 32
     c86:	51 e4       	ldi	r21, 0x41	; 65
     c88:	6e a5       	ldd	r22, Y+46	; 0x2e
     c8a:	7f a5       	ldd	r23, Y+47	; 0x2f
     c8c:	88 a9       	ldd	r24, Y+48	; 0x30
     c8e:	99 a9       	ldd	r25, Y+49	; 0x31
     c90:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	bc 01       	movw	r22, r24
     c9a:	cd 01       	movw	r24, r26
     c9c:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	9f ab       	std	Y+55, r25	; 0x37
     ca6:	8e ab       	std	Y+54, r24	; 0x36
     ca8:	0f c0       	rjmp	.+30     	; 0xcc8 <ds18b20_writebit+0x38c>
     caa:	89 e1       	ldi	r24, 0x19	; 25
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	99 af       	std	Y+57, r25	; 0x39
     cb0:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb2:	88 ad       	ldd	r24, Y+56	; 0x38
     cb4:	99 ad       	ldd	r25, Y+57	; 0x39
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <ds18b20_writebit+0x37a>
     cba:	99 af       	std	Y+57, r25	; 0x39
     cbc:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cbe:	8e a9       	ldd	r24, Y+54	; 0x36
     cc0:	9f a9       	ldd	r25, Y+55	; 0x37
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	9f ab       	std	Y+55, r25	; 0x37
     cc6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc8:	8e a9       	ldd	r24, Y+54	; 0x36
     cca:	9f a9       	ldd	r25, Y+55	; 0x37
     ccc:	89 2b       	or	r24, r25
     cce:	69 f7       	brne	.-38     	; 0xcaa <ds18b20_writebit+0x36e>
     cd0:	3f c0       	rjmp	.+126    	; 0xd50 <ds18b20_writebit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd2:	6a a9       	ldd	r22, Y+50	; 0x32
     cd4:	7b a9       	ldd	r23, Y+51	; 0x33
     cd6:	8c a9       	ldd	r24, Y+52	; 0x34
     cd8:	9d a9       	ldd	r25, Y+53	; 0x35
     cda:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	9f ab       	std	Y+55, r25	; 0x37
     ce4:	8e ab       	std	Y+54, r24	; 0x36
     ce6:	8e a9       	ldd	r24, Y+54	; 0x36
     ce8:	9f a9       	ldd	r25, Y+55	; 0x37
     cea:	9b af       	std	Y+59, r25	; 0x3b
     cec:	8a af       	std	Y+58, r24	; 0x3a
     cee:	8a ad       	ldd	r24, Y+58	; 0x3a
     cf0:	9b ad       	ldd	r25, Y+59	; 0x3b
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <ds18b20_writebit+0x3b6>
     cf6:	9b af       	std	Y+59, r25	; 0x3b
     cf8:	8a af       	std	Y+58, r24	; 0x3a
     cfa:	2a c0       	rjmp	.+84     	; 0xd50 <ds18b20_writebit+0x414>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	4f e7       	ldi	r20, 0x7F	; 127
     d02:	53 e4       	ldi	r21, 0x43	; 67
     d04:	6d a1       	ldd	r22, Y+37	; 0x25
     d06:	7e a1       	ldd	r23, Y+38	; 0x26
     d08:	8f a1       	ldd	r24, Y+39	; 0x27
     d0a:	98 a5       	ldd	r25, Y+40	; 0x28
     d0c:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     d10:	18 16       	cp	r1, r24
     d12:	ac f4       	brge	.+42     	; 0xd3e <ds18b20_writebit+0x402>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     d14:	69 a5       	ldd	r22, Y+41	; 0x29
     d16:	7a a5       	ldd	r23, Y+42	; 0x2a
     d18:	8b a5       	ldd	r24, Y+43	; 0x2b
     d1a:	9c a5       	ldd	r25, Y+44	; 0x2c
     d1c:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	9d af       	std	Y+61, r25	; 0x3d
     d26:	8c af       	std	Y+60, r24	; 0x3c
     d28:	8c ad       	ldd	r24, Y+60	; 0x3c
     d2a:	9d ad       	ldd	r25, Y+61	; 0x3d
     d2c:	9f af       	std	Y+63, r25	; 0x3f
     d2e:	8e af       	std	Y+62, r24	; 0x3e
     d30:	8e ad       	ldd	r24, Y+62	; 0x3e
     d32:	9f ad       	ldd	r25, Y+63	; 0x3f
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <ds18b20_writebit+0x3f8>
     d38:	9f af       	std	Y+63, r25	; 0x3f
     d3a:	8e af       	std	Y+62, r24	; 0x3e
     d3c:	1c c0       	rjmp	.+56     	; 0xd76 <ds18b20_writebit+0x43a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d3e:	6d a1       	ldd	r22, Y+37	; 0x25
     d40:	7e a1       	ldd	r23, Y+38	; 0x26
     d42:	8f a1       	ldd	r24, Y+39	; 0x27
     d44:	98 a5       	ldd	r25, Y+40	; 0x28
     d46:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	8d a7       	std	Y+45, r24	; 0x2d
     d50:	2d a5       	ldd	r18, Y+45	; 0x2d
     d52:	ce 01       	movw	r24, r28
     d54:	80 5c       	subi	r24, 0xC0	; 192
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	fc 01       	movw	r30, r24
     d5a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d5c:	ce 01       	movw	r24, r28
     d5e:	80 5c       	subi	r24, 0xC0	; 192
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	fc 01       	movw	r30, r24
     d64:	80 81       	ld	r24, Z
     d66:	28 2f       	mov	r18, r24
     d68:	2a 95       	dec	r18
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <ds18b20_writebit+0x42c>
     d6c:	ce 01       	movw	r24, r28
     d6e:	80 5c       	subi	r24, 0xC0	; 192
     d70:	9f 4f       	sbci	r25, 0xFF	; 255
     d72:	fc 01       	movw	r30, r24
     d74:	20 83       	st	Z, r18

	//wait 60uS and release the line
	_delay_us(60);
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
     d76:	87 e2       	ldi	r24, 0x27	; 39
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	27 e2       	ldi	r18, 0x27	; 39
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	f9 01       	movw	r30, r18
     d80:	20 81       	ld	r18, Z
     d82:	2e 7f       	andi	r18, 0xFE	; 254
     d84:	fc 01       	movw	r30, r24
     d86:	20 83       	st	Z, r18
}
     d88:	00 00       	nop
     d8a:	cf 5b       	subi	r28, 0xBF	; 191
     d8c:	df 4f       	sbci	r29, 0xFF	; 255
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <ds18b20_readbit>:

/*
 * read one bit
 */
uint8_t ds18b20_readbit(void){
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	c1 56       	subi	r28, 0x61	; 97
     dac:	d1 09       	sbc	r29, r1
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
	uint8_t bit=0;
     db8:	19 82       	std	Y+1, r1	; 0x01

	//low for 1uS
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
     dba:	88 e2       	ldi	r24, 0x28	; 40
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	28 e2       	ldi	r18, 0x28	; 40
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	f9 01       	movw	r30, r18
     dc4:	20 81       	ld	r18, Z
     dc6:	2e 7f       	andi	r18, 0xFE	; 254
     dc8:	fc 01       	movw	r30, r24
     dca:	20 83       	st	Z, r18
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
     dcc:	87 e2       	ldi	r24, 0x27	; 39
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	27 e2       	ldi	r18, 0x27	; 39
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	f9 01       	movw	r30, r18
     dd6:	20 81       	ld	r18, Z
     dd8:	21 60       	ori	r18, 0x01	; 1
     dda:	fc 01       	movw	r30, r24
     ddc:	20 83       	st	Z, r18
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	a0 e8       	ldi	r26, 0x80	; 128
     de4:	bf e3       	ldi	r27, 0x3F	; 63
     de6:	8e 83       	std	Y+6, r24	; 0x06
     de8:	9f 83       	std	Y+7, r25	; 0x07
     dea:	a8 87       	std	Y+8, r26	; 0x08
     dec:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     dee:	2b ea       	ldi	r18, 0xAB	; 171
     df0:	3a ea       	ldi	r19, 0xAA	; 170
     df2:	4a ea       	ldi	r20, 0xAA	; 170
     df4:	5e e3       	ldi	r21, 0x3E	; 62
     df6:	6e 81       	ldd	r22, Y+6	; 0x06
     df8:	7f 81       	ldd	r23, Y+7	; 0x07
     dfa:	88 85       	ldd	r24, Y+8	; 0x08
     dfc:	99 85       	ldd	r25, Y+9	; 0x09
     dfe:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	8a a7       	std	Y+42, r24	; 0x2a
     e08:	9b a7       	std	Y+43, r25	; 0x2b
     e0a:	ac a7       	std	Y+44, r26	; 0x2c
     e0c:	bd a7       	std	Y+45, r27	; 0x2d
	__tmp2 = ((F_CPU) / 4e6) * __us;
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e8       	ldi	r20, 0x80	; 128
     e14:	5e e3       	ldi	r21, 0x3E	; 62
     e16:	6e 81       	ldd	r22, Y+6	; 0x06
     e18:	7f 81       	ldd	r23, Y+7	; 0x07
     e1a:	88 85       	ldd	r24, Y+8	; 0x08
     e1c:	99 85       	ldd	r25, Y+9	; 0x09
     e1e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	8e a7       	std	Y+46, r24	; 0x2e
     e28:	9f a7       	std	Y+47, r25	; 0x2f
     e2a:	a8 ab       	std	Y+48, r26	; 0x30
     e2c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e8       	ldi	r20, 0x80	; 128
     e34:	5f e3       	ldi	r21, 0x3F	; 63
     e36:	6a a5       	ldd	r22, Y+42	; 0x2a
     e38:	7b a5       	ldd	r23, Y+43	; 0x2b
     e3a:	8c a5       	ldd	r24, Y+44	; 0x2c
     e3c:	9d a5       	ldd	r25, Y+45	; 0x2d
     e3e:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     e42:	88 23       	and	r24, r24
     e44:	1c f4       	brge	.+6      	; 0xe4c <ds18b20_readbit+0xae>
		__ticks = 1;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	8a ab       	std	Y+50, r24	; 0x32
     e4a:	d0 c0       	rjmp	.+416    	; 0xfec <ds18b20_readbit+0x24e>
	else if (__tmp2 > 65535)
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	3f ef       	ldi	r19, 0xFF	; 255
     e50:	4f e7       	ldi	r20, 0x7F	; 127
     e52:	57 e4       	ldi	r21, 0x47	; 71
     e54:	6e a5       	ldd	r22, Y+46	; 0x2e
     e56:	7f a5       	ldd	r23, Y+47	; 0x2f
     e58:	88 a9       	ldd	r24, Y+48	; 0x30
     e5a:	99 a9       	ldd	r25, Y+49	; 0x31
     e5c:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     e60:	18 16       	cp	r1, r24
     e62:	0c f0       	brlt	.+2      	; 0xe66 <ds18b20_readbit+0xc8>
     e64:	85 c0       	rjmp	.+266    	; 0xf70 <ds18b20_readbit+0x1d2>
	{
		_delay_ms(__us / 1000.0);
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	4a e7       	ldi	r20, 0x7A	; 122
     e6c:	54 e4       	ldi	r21, 0x44	; 68
     e6e:	6e 81       	ldd	r22, Y+6	; 0x06
     e70:	7f 81       	ldd	r23, Y+7	; 0x07
     e72:	88 85       	ldd	r24, Y+8	; 0x08
     e74:	99 85       	ldd	r25, Y+9	; 0x09
     e76:	0e 94 13 11 	call	0x2226	; 0x2226 <__divsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	8b ab       	std	Y+51, r24	; 0x33
     e80:	9c ab       	std	Y+52, r25	; 0x34
     e82:	ad ab       	std	Y+53, r26	; 0x35
     e84:	be ab       	std	Y+54, r27	; 0x36

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	4a e7       	ldi	r20, 0x7A	; 122
     e8c:	53 e4       	ldi	r21, 0x43	; 67
     e8e:	6b a9       	ldd	r22, Y+51	; 0x33
     e90:	7c a9       	ldd	r23, Y+52	; 0x34
     e92:	8d a9       	ldd	r24, Y+53	; 0x35
     e94:	9e a9       	ldd	r25, Y+54	; 0x36
     e96:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	8f ab       	std	Y+55, r24	; 0x37
     ea0:	98 af       	std	Y+56, r25	; 0x38
     ea2:	a9 af       	std	Y+57, r26	; 0x39
     ea4:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e8       	ldi	r20, 0x80	; 128
     eac:	5f e3       	ldi	r21, 0x3F	; 63
     eae:	6f a9       	ldd	r22, Y+55	; 0x37
     eb0:	78 ad       	ldd	r23, Y+56	; 0x38
     eb2:	89 ad       	ldd	r24, Y+57	; 0x39
     eb4:	9a ad       	ldd	r25, Y+58	; 0x3a
     eb6:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     eba:	88 23       	and	r24, r24
     ebc:	2c f4       	brge	.+10     	; 0xec8 <ds18b20_readbit+0x12a>
		__ticks = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	9c af       	std	Y+60, r25	; 0x3c
     ec4:	8b af       	std	Y+59, r24	; 0x3b
     ec6:	3f c0       	rjmp	.+126    	; 0xf46 <ds18b20_readbit+0x1a8>
	else if (__tmp > 65535)
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	3f ef       	ldi	r19, 0xFF	; 255
     ecc:	4f e7       	ldi	r20, 0x7F	; 127
     ece:	57 e4       	ldi	r21, 0x47	; 71
     ed0:	6f a9       	ldd	r22, Y+55	; 0x37
     ed2:	78 ad       	ldd	r23, Y+56	; 0x38
     ed4:	89 ad       	ldd	r24, Y+57	; 0x39
     ed6:	9a ad       	ldd	r25, Y+58	; 0x3a
     ed8:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     edc:	18 16       	cp	r1, r24
     ede:	4c f5       	brge	.+82     	; 0xf32 <ds18b20_readbit+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e2       	ldi	r20, 0x20	; 32
     ee6:	51 e4       	ldi	r21, 0x41	; 65
     ee8:	6b a9       	ldd	r22, Y+51	; 0x33
     eea:	7c a9       	ldd	r23, Y+52	; 0x34
     eec:	8d a9       	ldd	r24, Y+53	; 0x35
     eee:	9e a9       	ldd	r25, Y+54	; 0x36
     ef0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	bc 01       	movw	r22, r24
     efa:	cd 01       	movw	r24, r26
     efc:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9c af       	std	Y+60, r25	; 0x3c
     f06:	8b af       	std	Y+59, r24	; 0x3b
     f08:	0f c0       	rjmp	.+30     	; 0xf28 <ds18b20_readbit+0x18a>
     f0a:	89 e1       	ldi	r24, 0x19	; 25
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9e af       	std	Y+62, r25	; 0x3e
     f10:	8d af       	std	Y+61, r24	; 0x3d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f12:	8d ad       	ldd	r24, Y+61	; 0x3d
     f14:	9e ad       	ldd	r25, Y+62	; 0x3e
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <ds18b20_readbit+0x178>
     f1a:	9e af       	std	Y+62, r25	; 0x3e
     f1c:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1e:	8b ad       	ldd	r24, Y+59	; 0x3b
     f20:	9c ad       	ldd	r25, Y+60	; 0x3c
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	9c af       	std	Y+60, r25	; 0x3c
     f26:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f28:	8b ad       	ldd	r24, Y+59	; 0x3b
     f2a:	9c ad       	ldd	r25, Y+60	; 0x3c
     f2c:	89 2b       	or	r24, r25
     f2e:	69 f7       	brne	.-38     	; 0xf0a <ds18b20_readbit+0x16c>
     f30:	5d c0       	rjmp	.+186    	; 0xfec <ds18b20_readbit+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f32:	6f a9       	ldd	r22, Y+55	; 0x37
     f34:	78 ad       	ldd	r23, Y+56	; 0x38
     f36:	89 ad       	ldd	r24, Y+57	; 0x39
     f38:	9a ad       	ldd	r25, Y+58	; 0x3a
     f3a:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	9c af       	std	Y+60, r25	; 0x3c
     f44:	8b af       	std	Y+59, r24	; 0x3b
     f46:	2b ad       	ldd	r18, Y+59	; 0x3b
     f48:	3c ad       	ldd	r19, Y+60	; 0x3c
     f4a:	ce 01       	movw	r24, r28
     f4c:	cf 96       	adiw	r24, 0x3f	; 63
     f4e:	fc 01       	movw	r30, r24
     f50:	31 83       	std	Z+1, r19	; 0x01
     f52:	20 83       	st	Z, r18
     f54:	ce 01       	movw	r24, r28
     f56:	cf 96       	adiw	r24, 0x3f	; 63
     f58:	fc 01       	movw	r30, r24
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <ds18b20_readbit+0x1c0>
     f62:	9e 01       	movw	r18, r28
     f64:	21 5c       	subi	r18, 0xC1	; 193
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	f9 01       	movw	r30, r18
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
     f6e:	3e c0       	rjmp	.+124    	; 0xfec <ds18b20_readbit+0x24e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4f e7       	ldi	r20, 0x7F	; 127
     f76:	53 e4       	ldi	r21, 0x43	; 67
     f78:	6a a5       	ldd	r22, Y+42	; 0x2a
     f7a:	7b a5       	ldd	r23, Y+43	; 0x2b
     f7c:	8c a5       	ldd	r24, Y+44	; 0x2c
     f7e:	9d a5       	ldd	r25, Y+45	; 0x2d
     f80:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
     f84:	18 16       	cp	r1, r24
     f86:	4c f5       	brge	.+82     	; 0xfda <ds18b20_readbit+0x23c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     f88:	8e 01       	movw	r16, r28
     f8a:	0f 5b       	subi	r16, 0xBF	; 191
     f8c:	1f 4f       	sbci	r17, 0xFF	; 255
     f8e:	6e a5       	ldd	r22, Y+46	; 0x2e
     f90:	7f a5       	ldd	r23, Y+47	; 0x2f
     f92:	88 a9       	ldd	r24, Y+48	; 0x30
     f94:	99 a9       	ldd	r25, Y+49	; 0x31
     f96:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	f8 01       	movw	r30, r16
     fa0:	91 83       	std	Z+1, r25	; 0x01
     fa2:	80 83       	st	Z, r24
     fa4:	ce 01       	movw	r24, r28
     fa6:	8d 5b       	subi	r24, 0xBD	; 189
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	9e 01       	movw	r18, r28
     fac:	2f 5b       	subi	r18, 0xBF	; 191
     fae:	3f 4f       	sbci	r19, 0xFF	; 255
     fb0:	f9 01       	movw	r30, r18
     fb2:	20 81       	ld	r18, Z
     fb4:	31 81       	ldd	r19, Z+1	; 0x01
     fb6:	fc 01       	movw	r30, r24
     fb8:	31 83       	std	Z+1, r19	; 0x01
     fba:	20 83       	st	Z, r18
     fbc:	ce 01       	movw	r24, r28
     fbe:	8d 5b       	subi	r24, 0xBD	; 189
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	fc 01       	movw	r30, r24
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <ds18b20_readbit+0x22a>
     fcc:	9e 01       	movw	r18, r28
     fce:	2d 5b       	subi	r18, 0xBD	; 189
     fd0:	3f 4f       	sbci	r19, 0xFF	; 255
     fd2:	f9 01       	movw	r30, r18
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
     fd8:	1c c0       	rjmp	.+56     	; 0x1012 <ds18b20_readbit+0x274>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fda:	6a a5       	ldd	r22, Y+42	; 0x2a
     fdc:	7b a5       	ldd	r23, Y+43	; 0x2b
     fde:	8c a5       	ldd	r24, Y+44	; 0x2c
     fe0:	9d a5       	ldd	r25, Y+45	; 0x2d
     fe2:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	8a ab       	std	Y+50, r24	; 0x32
     fec:	ce 01       	movw	r24, r28
     fee:	8b 5b       	subi	r24, 0xBB	; 187
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	2a a9       	ldd	r18, Y+50	; 0x32
     ff4:	fc 01       	movw	r30, r24
     ff6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ff8:	ce 01       	movw	r24, r28
     ffa:	8b 5b       	subi	r24, 0xBB	; 187
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	fc 01       	movw	r30, r24
    1000:	80 81       	ld	r24, Z
    1002:	28 2f       	mov	r18, r24
    1004:	2a 95       	dec	r18
    1006:	f1 f7       	brne	.-4      	; 0x1004 <ds18b20_readbit+0x266>
    1008:	ce 01       	movw	r24, r28
    100a:	8b 5b       	subi	r24, 0xBB	; 187
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	fc 01       	movw	r30, r24
    1010:	20 83       	st	Z, r18
	_delay_us(1);

	//release line and wait for 14uS
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
    1012:	87 e2       	ldi	r24, 0x27	; 39
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	27 e2       	ldi	r18, 0x27	; 39
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	f9 01       	movw	r30, r18
    101c:	20 81       	ld	r18, Z
    101e:	2e 7f       	andi	r18, 0xFE	; 254
    1020:	fc 01       	movw	r30, r24
    1022:	20 83       	st	Z, r18
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a0 e6       	ldi	r26, 0x60	; 96
    102a:	b1 e4       	ldi	r27, 0x41	; 65
    102c:	8a 87       	std	Y+10, r24	; 0x0a
    102e:	9b 87       	std	Y+11, r25	; 0x0b
    1030:	ac 87       	std	Y+12, r26	; 0x0c
    1032:	bd 87       	std	Y+13, r27	; 0x0d
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1034:	2b ea       	ldi	r18, 0xAB	; 171
    1036:	3a ea       	ldi	r19, 0xAA	; 170
    1038:	4a ea       	ldi	r20, 0xAA	; 170
    103a:	5e e3       	ldi	r21, 0x3E	; 62
    103c:	6a 85       	ldd	r22, Y+10	; 0x0a
    103e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1040:	8c 85       	ldd	r24, Y+12	; 0x0c
    1042:	9d 85       	ldd	r25, Y+13	; 0x0d
    1044:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	8e 87       	std	Y+14, r24	; 0x0e
    104e:	9f 87       	std	Y+15, r25	; 0x0f
    1050:	a8 8b       	std	Y+16, r26	; 0x10
    1052:	b9 8b       	std	Y+17, r27	; 0x11
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5e e3       	ldi	r21, 0x3E	; 62
    105c:	6a 85       	ldd	r22, Y+10	; 0x0a
    105e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1060:	8c 85       	ldd	r24, Y+12	; 0x0c
    1062:	9d 85       	ldd	r25, Y+13	; 0x0d
    1064:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	8a 8b       	std	Y+18, r24	; 0x12
    106e:	9b 8b       	std	Y+19, r25	; 0x13
    1070:	ac 8b       	std	Y+20, r26	; 0x14
    1072:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e8       	ldi	r20, 0x80	; 128
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	6e 85       	ldd	r22, Y+14	; 0x0e
    107e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1080:	88 89       	ldd	r24, Y+16	; 0x10
    1082:	99 89       	ldd	r25, Y+17	; 0x11
    1084:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    1088:	88 23       	and	r24, r24
    108a:	1c f4       	brge	.+6      	; 0x1092 <ds18b20_readbit+0x2f4>
		__ticks = 1;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	8e 8b       	std	Y+22, r24	; 0x16
    1090:	b2 c0       	rjmp	.+356    	; 0x11f6 <ds18b20_readbit+0x458>
	else if (__tmp2 > 65535)
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	3f ef       	ldi	r19, 0xFF	; 255
    1096:	4f e7       	ldi	r20, 0x7F	; 127
    1098:	57 e4       	ldi	r21, 0x47	; 71
    109a:	6a 89       	ldd	r22, Y+18	; 0x12
    109c:	7b 89       	ldd	r23, Y+19	; 0x13
    109e:	8c 89       	ldd	r24, Y+20	; 0x14
    10a0:	9d 89       	ldd	r25, Y+21	; 0x15
    10a2:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    10a6:	18 16       	cp	r1, r24
    10a8:	0c f0       	brlt	.+2      	; 0x10ac <ds18b20_readbit+0x30e>
    10aa:	7b c0       	rjmp	.+246    	; 0x11a2 <ds18b20_readbit+0x404>
	{
		_delay_ms(__us / 1000.0);
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	4a e7       	ldi	r20, 0x7A	; 122
    10b2:	54 e4       	ldi	r21, 0x44	; 68
    10b4:	6a 85       	ldd	r22, Y+10	; 0x0a
    10b6:	7b 85       	ldd	r23, Y+11	; 0x0b
    10b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    10bc:	0e 94 13 11 	call	0x2226	; 0x2226 <__divsf3>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	8f 8b       	std	Y+23, r24	; 0x17
    10c6:	98 8f       	std	Y+24, r25	; 0x18
    10c8:	a9 8f       	std	Y+25, r26	; 0x19
    10ca:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	4a e7       	ldi	r20, 0x7A	; 122
    10d2:	53 e4       	ldi	r21, 0x43	; 67
    10d4:	6f 89       	ldd	r22, Y+23	; 0x17
    10d6:	78 8d       	ldd	r23, Y+24	; 0x18
    10d8:	89 8d       	ldd	r24, Y+25	; 0x19
    10da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10dc:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	8b 8f       	std	Y+27, r24	; 0x1b
    10e6:	9c 8f       	std	Y+28, r25	; 0x1c
    10e8:	ad 8f       	std	Y+29, r26	; 0x1d
    10ea:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    10f6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    10f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10fc:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    1100:	88 23       	and	r24, r24
    1102:	2c f4       	brge	.+10     	; 0x110e <ds18b20_readbit+0x370>
		__ticks = 1;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	98 a3       	std	Y+32, r25	; 0x20
    110a:	8f 8f       	std	Y+31, r24	; 0x1f
    110c:	3f c0       	rjmp	.+126    	; 0x118c <ds18b20_readbit+0x3ee>
	else if (__tmp > 65535)
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1118:	7c 8d       	ldd	r23, Y+28	; 0x1c
    111a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    111c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    111e:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    1122:	18 16       	cp	r1, r24
    1124:	4c f5       	brge	.+82     	; 0x1178 <ds18b20_readbit+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	6f 89       	ldd	r22, Y+23	; 0x17
    1130:	78 8d       	ldd	r23, Y+24	; 0x18
    1132:	89 8d       	ldd	r24, Y+25	; 0x19
    1134:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1136:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	98 a3       	std	Y+32, r25	; 0x20
    114c:	8f 8f       	std	Y+31, r24	; 0x1f
    114e:	0f c0       	rjmp	.+30     	; 0x116e <ds18b20_readbit+0x3d0>
    1150:	89 e1       	ldi	r24, 0x19	; 25
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9a a3       	std	Y+34, r25	; 0x22
    1156:	89 a3       	std	Y+33, r24	; 0x21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1158:	89 a1       	ldd	r24, Y+33	; 0x21
    115a:	9a a1       	ldd	r25, Y+34	; 0x22
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <ds18b20_readbit+0x3be>
    1160:	9a a3       	std	Y+34, r25	; 0x22
    1162:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1164:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1166:	98 a1       	ldd	r25, Y+32	; 0x20
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	98 a3       	std	Y+32, r25	; 0x20
    116c:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1170:	98 a1       	ldd	r25, Y+32	; 0x20
    1172:	89 2b       	or	r24, r25
    1174:	69 f7       	brne	.-38     	; 0x1150 <ds18b20_readbit+0x3b2>
    1176:	3f c0       	rjmp	.+126    	; 0x11f6 <ds18b20_readbit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1178:	6b 8d       	ldd	r22, Y+27	; 0x1b
    117a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    117c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    117e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1180:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	98 a3       	std	Y+32, r25	; 0x20
    118a:	8f 8f       	std	Y+31, r24	; 0x1f
    118c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    118e:	98 a1       	ldd	r25, Y+32	; 0x20
    1190:	9c a3       	std	Y+36, r25	; 0x24
    1192:	8b a3       	std	Y+35, r24	; 0x23
    1194:	8b a1       	ldd	r24, Y+35	; 0x23
    1196:	9c a1       	ldd	r25, Y+36	; 0x24
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <ds18b20_readbit+0x3fa>
    119c:	9c a3       	std	Y+36, r25	; 0x24
    119e:	8b a3       	std	Y+35, r24	; 0x23
    11a0:	2a c0       	rjmp	.+84     	; 0x11f6 <ds18b20_readbit+0x458>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	4f e7       	ldi	r20, 0x7F	; 127
    11a8:	53 e4       	ldi	r21, 0x43	; 67
    11aa:	6e 85       	ldd	r22, Y+14	; 0x0e
    11ac:	7f 85       	ldd	r23, Y+15	; 0x0f
    11ae:	88 89       	ldd	r24, Y+16	; 0x10
    11b0:	99 89       	ldd	r25, Y+17	; 0x11
    11b2:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    11b6:	18 16       	cp	r1, r24
    11b8:	ac f4       	brge	.+42     	; 0x11e4 <ds18b20_readbit+0x446>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    11ba:	6a 89       	ldd	r22, Y+18	; 0x12
    11bc:	7b 89       	ldd	r23, Y+19	; 0x13
    11be:	8c 89       	ldd	r24, Y+20	; 0x14
    11c0:	9d 89       	ldd	r25, Y+21	; 0x15
    11c2:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9e a3       	std	Y+38, r25	; 0x26
    11cc:	8d a3       	std	Y+37, r24	; 0x25
    11ce:	8d a1       	ldd	r24, Y+37	; 0x25
    11d0:	9e a1       	ldd	r25, Y+38	; 0x26
    11d2:	98 a7       	std	Y+40, r25	; 0x28
    11d4:	8f a3       	std	Y+39, r24	; 0x27
    11d6:	8f a1       	ldd	r24, Y+39	; 0x27
    11d8:	98 a5       	ldd	r25, Y+40	; 0x28
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <ds18b20_readbit+0x43c>
    11de:	98 a7       	std	Y+40, r25	; 0x28
    11e0:	8f a3       	std	Y+39, r24	; 0x27
    11e2:	0f c0       	rjmp	.+30     	; 0x1202 <ds18b20_readbit+0x464>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11e4:	6e 85       	ldd	r22, Y+14	; 0x0e
    11e6:	7f 85       	ldd	r23, Y+15	; 0x0f
    11e8:	88 89       	ldd	r24, Y+16	; 0x10
    11ea:	99 89       	ldd	r25, Y+17	; 0x11
    11ec:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	8e 8b       	std	Y+22, r24	; 0x16
    11f6:	8e 89       	ldd	r24, Y+22	; 0x16
    11f8:	89 a7       	std	Y+41, r24	; 0x29
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11fa:	89 a5       	ldd	r24, Y+41	; 0x29
    11fc:	8a 95       	dec	r24
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <ds18b20_readbit+0x45e>
    1200:	89 a7       	std	Y+41, r24	; 0x29
	_delay_us(14);

	//read the value
	if(DS18B20_PIN & (1<<DS18B20_DQ))
    1202:	86 e2       	ldi	r24, 0x26	; 38
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	fc 01       	movw	r30, r24
    1208:	80 81       	ld	r24, Z
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	99 27       	eor	r25, r25
    1212:	89 2b       	or	r24, r25
    1214:	11 f0       	breq	.+4      	; 0x121a <ds18b20_readbit+0x47c>
		bit=1;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a4 e3       	ldi	r26, 0x34	; 52
    1220:	b2 e4       	ldi	r27, 0x42	; 66
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	9b 83       	std	Y+3, r25	; 0x03
    1226:	ac 83       	std	Y+4, r26	; 0x04
    1228:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    122a:	8e 01       	movw	r16, r28
    122c:	0a 5b       	subi	r16, 0xBA	; 186
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
    1230:	2b ea       	ldi	r18, 0xAB	; 171
    1232:	3a ea       	ldi	r19, 0xAA	; 170
    1234:	4a ea       	ldi	r20, 0xAA	; 170
    1236:	5e e3       	ldi	r21, 0x3E	; 62
    1238:	6a 81       	ldd	r22, Y+2	; 0x02
    123a:	7b 81       	ldd	r23, Y+3	; 0x03
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	f8 01       	movw	r30, r16
    124a:	80 83       	st	Z, r24
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	a2 83       	std	Z+2, r26	; 0x02
    1250:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1252:	8e 01       	movw	r16, r28
    1254:	06 5b       	subi	r16, 0xB6	; 182
    1256:	1f 4f       	sbci	r17, 0xFF	; 255
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e8       	ldi	r20, 0x80	; 128
    125e:	5e e3       	ldi	r21, 0x3E	; 62
    1260:	6a 81       	ldd	r22, Y+2	; 0x02
    1262:	7b 81       	ldd	r23, Y+3	; 0x03
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	f8 01       	movw	r30, r16
    1272:	80 83       	st	Z, r24
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	a2 83       	std	Z+2, r26	; 0x02
    1278:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    127a:	ce 01       	movw	r24, r28
    127c:	8a 5b       	subi	r24, 0xBA	; 186
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e8       	ldi	r20, 0x80	; 128
    1286:	5f e3       	ldi	r21, 0x3F	; 63
    1288:	fc 01       	movw	r30, r24
    128a:	60 81       	ld	r22, Z
    128c:	71 81       	ldd	r23, Z+1	; 0x01
    128e:	82 81       	ldd	r24, Z+2	; 0x02
    1290:	93 81       	ldd	r25, Z+3	; 0x03
    1292:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    1296:	88 23       	and	r24, r24
    1298:	3c f4       	brge	.+14     	; 0x12a8 <ds18b20_readbit+0x50a>
		__ticks = 1;
    129a:	ce 01       	movw	r24, r28
    129c:	82 5b       	subi	r24, 0xB2	; 178
    129e:	9f 4f       	sbci	r25, 0xFF	; 255
    12a0:	21 e0       	ldi	r18, 0x01	; 1
    12a2:	fc 01       	movw	r30, r24
    12a4:	20 83       	st	Z, r18
    12a6:	2c c1       	rjmp	.+600    	; 0x1500 <ds18b20_readbit+0x762>
	else if (__tmp2 > 65535)
    12a8:	ce 01       	movw	r24, r28
    12aa:	86 5b       	subi	r24, 0xB6	; 182
    12ac:	9f 4f       	sbci	r25, 0xFF	; 255
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	3f ef       	ldi	r19, 0xFF	; 255
    12b2:	4f e7       	ldi	r20, 0x7F	; 127
    12b4:	57 e4       	ldi	r21, 0x47	; 71
    12b6:	fc 01       	movw	r30, r24
    12b8:	60 81       	ld	r22, Z
    12ba:	71 81       	ldd	r23, Z+1	; 0x01
    12bc:	82 81       	ldd	r24, Z+2	; 0x02
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    12c4:	18 16       	cp	r1, r24
    12c6:	0c f0       	brlt	.+2      	; 0x12ca <ds18b20_readbit+0x52c>
    12c8:	cd c0       	rjmp	.+410    	; 0x1464 <ds18b20_readbit+0x6c6>
	{
		_delay_ms(__us / 1000.0);
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	4a e7       	ldi	r20, 0x7A	; 122
    12d0:	54 e4       	ldi	r21, 0x44	; 68
    12d2:	6a 81       	ldd	r22, Y+2	; 0x02
    12d4:	7b 81       	ldd	r23, Y+3	; 0x03
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	0e 94 13 11 	call	0x2226	; 0x2226 <__divsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	9e 01       	movw	r18, r28
    12e4:	21 5b       	subi	r18, 0xB1	; 177
    12e6:	3f 4f       	sbci	r19, 0xFF	; 255
    12e8:	f9 01       	movw	r30, r18
    12ea:	80 83       	st	Z, r24
    12ec:	91 83       	std	Z+1, r25	; 0x01
    12ee:	a2 83       	std	Z+2, r26	; 0x02
    12f0:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12f2:	8e 01       	movw	r16, r28
    12f4:	0d 5a       	subi	r16, 0xAD	; 173
    12f6:	1f 4f       	sbci	r17, 0xFF	; 255
    12f8:	ce 01       	movw	r24, r28
    12fa:	81 5b       	subi	r24, 0xB1	; 177
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	4a e7       	ldi	r20, 0x7A	; 122
    1304:	53 e4       	ldi	r21, 0x43	; 67
    1306:	fc 01       	movw	r30, r24
    1308:	60 81       	ld	r22, Z
    130a:	71 81       	ldd	r23, Z+1	; 0x01
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	93 81       	ldd	r25, Z+3	; 0x03
    1310:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	f8 01       	movw	r30, r16
    131a:	80 83       	st	Z, r24
    131c:	91 83       	std	Z+1, r25	; 0x01
    131e:	a2 83       	std	Z+2, r26	; 0x02
    1320:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1322:	ce 01       	movw	r24, r28
    1324:	8d 5a       	subi	r24, 0xAD	; 173
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e8       	ldi	r20, 0x80	; 128
    132e:	5f e3       	ldi	r21, 0x3F	; 63
    1330:	fc 01       	movw	r30, r24
    1332:	60 81       	ld	r22, Z
    1334:	71 81       	ldd	r23, Z+1	; 0x01
    1336:	82 81       	ldd	r24, Z+2	; 0x02
    1338:	93 81       	ldd	r25, Z+3	; 0x03
    133a:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    133e:	88 23       	and	r24, r24
    1340:	4c f4       	brge	.+18     	; 0x1354 <ds18b20_readbit+0x5b6>
		__ticks = 1;
    1342:	ce 01       	movw	r24, r28
    1344:	89 5a       	subi	r24, 0xA9	; 169
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	21 e0       	ldi	r18, 0x01	; 1
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	fc 01       	movw	r30, r24
    134e:	31 83       	std	Z+1, r19	; 0x01
    1350:	20 83       	st	Z, r18
    1352:	6d c0       	rjmp	.+218    	; 0x142e <ds18b20_readbit+0x690>
	else if (__tmp > 65535)
    1354:	ce 01       	movw	r24, r28
    1356:	8d 5a       	subi	r24, 0xAD	; 173
    1358:	9f 4f       	sbci	r25, 0xFF	; 255
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	3f ef       	ldi	r19, 0xFF	; 255
    135e:	4f e7       	ldi	r20, 0x7F	; 127
    1360:	57 e4       	ldi	r21, 0x47	; 71
    1362:	fc 01       	movw	r30, r24
    1364:	60 81       	ld	r22, Z
    1366:	71 81       	ldd	r23, Z+1	; 0x01
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    1370:	18 16       	cp	r1, r24
    1372:	0c f0       	brlt	.+2      	; 0x1376 <ds18b20_readbit+0x5d8>
    1374:	4a c0       	rjmp	.+148    	; 0x140a <ds18b20_readbit+0x66c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1376:	ce 01       	movw	r24, r28
    1378:	81 5b       	subi	r24, 0xB1	; 177
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e2       	ldi	r20, 0x20	; 32
    1382:	51 e4       	ldi	r21, 0x41	; 65
    1384:	fc 01       	movw	r30, r24
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	93 81       	ldd	r25, Z+3	; 0x03
    138e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	8e 01       	movw	r16, r28
    1398:	09 5a       	subi	r16, 0xA9	; 169
    139a:	1f 4f       	sbci	r17, 0xFF	; 255
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	f8 01       	movw	r30, r16
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	80 83       	st	Z, r24
    13ae:	24 c0       	rjmp	.+72     	; 0x13f8 <ds18b20_readbit+0x65a>
    13b0:	ce 01       	movw	r24, r28
    13b2:	87 5a       	subi	r24, 0xA7	; 167
    13b4:	9f 4f       	sbci	r25, 0xFF	; 255
    13b6:	29 e1       	ldi	r18, 0x19	; 25
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	fc 01       	movw	r30, r24
    13bc:	31 83       	std	Z+1, r19	; 0x01
    13be:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13c0:	ce 01       	movw	r24, r28
    13c2:	87 5a       	subi	r24, 0xA7	; 167
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	fc 01       	movw	r30, r24
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <ds18b20_readbit+0x62e>
    13d0:	9e 01       	movw	r18, r28
    13d2:	27 5a       	subi	r18, 0xA7	; 167
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	f9 01       	movw	r30, r18
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13dc:	ce 01       	movw	r24, r28
    13de:	89 5a       	subi	r24, 0xA9	; 169
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	9e 01       	movw	r18, r28
    13e4:	29 5a       	subi	r18, 0xA9	; 169
    13e6:	3f 4f       	sbci	r19, 0xFF	; 255
    13e8:	f9 01       	movw	r30, r18
    13ea:	20 81       	ld	r18, Z
    13ec:	31 81       	ldd	r19, Z+1	; 0x01
    13ee:	21 50       	subi	r18, 0x01	; 1
    13f0:	31 09       	sbc	r19, r1
    13f2:	fc 01       	movw	r30, r24
    13f4:	31 83       	std	Z+1, r19	; 0x01
    13f6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f8:	ce 01       	movw	r24, r28
    13fa:	89 5a       	subi	r24, 0xA9	; 169
    13fc:	9f 4f       	sbci	r25, 0xFF	; 255
    13fe:	fc 01       	movw	r30, r24
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	89 2b       	or	r24, r25
    1406:	a1 f6       	brne	.-88     	; 0x13b0 <ds18b20_readbit+0x612>
    1408:	7b c0       	rjmp	.+246    	; 0x1500 <ds18b20_readbit+0x762>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140a:	8e 01       	movw	r16, r28
    140c:	09 5a       	subi	r16, 0xA9	; 169
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	ce 01       	movw	r24, r28
    1412:	8d 5a       	subi	r24, 0xAD	; 173
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	fc 01       	movw	r30, r24
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	93 81       	ldd	r25, Z+3	; 0x03
    1420:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	f8 01       	movw	r30, r16
    142a:	91 83       	std	Z+1, r25	; 0x01
    142c:	80 83       	st	Z, r24
    142e:	ce 01       	movw	r24, r28
    1430:	85 5a       	subi	r24, 0xA5	; 165
    1432:	9f 4f       	sbci	r25, 0xFF	; 255
    1434:	9e 01       	movw	r18, r28
    1436:	29 5a       	subi	r18, 0xA9	; 169
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	f9 01       	movw	r30, r18
    143c:	20 81       	ld	r18, Z
    143e:	31 81       	ldd	r19, Z+1	; 0x01
    1440:	fc 01       	movw	r30, r24
    1442:	31 83       	std	Z+1, r19	; 0x01
    1444:	20 83       	st	Z, r18
    1446:	ce 01       	movw	r24, r28
    1448:	85 5a       	subi	r24, 0xA5	; 165
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	fc 01       	movw	r30, r24
    144e:	80 81       	ld	r24, Z
    1450:	91 81       	ldd	r25, Z+1	; 0x01
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <ds18b20_readbit+0x6b4>
    1456:	9e 01       	movw	r18, r28
    1458:	25 5a       	subi	r18, 0xA5	; 165
    145a:	3f 4f       	sbci	r19, 0xFF	; 255
    145c:	f9 01       	movw	r30, r18
    145e:	91 83       	std	Z+1, r25	; 0x01
    1460:	80 83       	st	Z, r24
    1462:	4e c0       	rjmp	.+156    	; 0x1500 <ds18b20_readbit+0x762>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1464:	ce 01       	movw	r24, r28
    1466:	8a 5b       	subi	r24, 0xBA	; 186
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	53 e4       	ldi	r21, 0x43	; 67
    1472:	fc 01       	movw	r30, r24
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    1480:	18 16       	cp	r1, r24
    1482:	6c f5       	brge	.+90     	; 0x14de <ds18b20_readbit+0x740>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1484:	8e 01       	movw	r16, r28
    1486:	03 5a       	subi	r16, 0xA3	; 163
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	ce 01       	movw	r24, r28
    148c:	86 5b       	subi	r24, 0xB6	; 182
    148e:	9f 4f       	sbci	r25, 0xFF	; 255
    1490:	fc 01       	movw	r30, r24
    1492:	60 81       	ld	r22, Z
    1494:	71 81       	ldd	r23, Z+1	; 0x01
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	f8 01       	movw	r30, r16
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	80 83       	st	Z, r24
    14a8:	ce 01       	movw	r24, r28
    14aa:	81 5a       	subi	r24, 0xA1	; 161
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	9e 01       	movw	r18, r28
    14b0:	23 5a       	subi	r18, 0xA3	; 163
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	f9 01       	movw	r30, r18
    14b6:	20 81       	ld	r18, Z
    14b8:	31 81       	ldd	r19, Z+1	; 0x01
    14ba:	fc 01       	movw	r30, r24
    14bc:	31 83       	std	Z+1, r19	; 0x01
    14be:	20 83       	st	Z, r18
    14c0:	ce 01       	movw	r24, r28
    14c2:	81 5a       	subi	r24, 0xA1	; 161
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	fc 01       	movw	r30, r24
    14c8:	80 81       	ld	r24, Z
    14ca:	91 81       	ldd	r25, Z+1	; 0x01
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <ds18b20_readbit+0x72e>
    14d0:	9e 01       	movw	r18, r28
    14d2:	21 5a       	subi	r18, 0xA1	; 161
    14d4:	3f 4f       	sbci	r19, 0xFF	; 255
    14d6:	f9 01       	movw	r30, r18
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	80 83       	st	Z, r24
    14dc:	28 c0       	rjmp	.+80     	; 0x152e <ds18b20_readbit+0x790>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14de:	8e 01       	movw	r16, r28
    14e0:	02 5b       	subi	r16, 0xB2	; 178
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
    14e4:	ce 01       	movw	r24, r28
    14e6:	8a 5b       	subi	r24, 0xBA	; 186
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	fc 01       	movw	r30, r24
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	f8 01       	movw	r30, r16
    14fe:	80 83       	st	Z, r24
    1500:	ce 01       	movw	r24, r28
    1502:	8f 59       	subi	r24, 0x9F	; 159
    1504:	9f 4f       	sbci	r25, 0xFF	; 255
    1506:	9e 01       	movw	r18, r28
    1508:	22 5b       	subi	r18, 0xB2	; 178
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	f9 01       	movw	r30, r18
    150e:	20 81       	ld	r18, Z
    1510:	fc 01       	movw	r30, r24
    1512:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1514:	ce 01       	movw	r24, r28
    1516:	8f 59       	subi	r24, 0x9F	; 159
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	fc 01       	movw	r30, r24
    151c:	80 81       	ld	r24, Z
    151e:	28 2f       	mov	r18, r24
    1520:	2a 95       	dec	r18
    1522:	f1 f7       	brne	.-4      	; 0x1520 <ds18b20_readbit+0x782>
    1524:	ce 01       	movw	r24, r28
    1526:	8f 59       	subi	r24, 0x9F	; 159
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	fc 01       	movw	r30, r24
    152c:	20 83       	st	Z, r18

	//wait 45uS and return read value
	_delay_us(45);
	return bit;
    152e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1530:	cf 59       	subi	r28, 0x9F	; 159
    1532:	df 4f       	sbci	r29, 0xFF	; 255
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	08 95       	ret

00001548 <ds18b20_writebyte>:

/*
 * write one byte
 */
void ds18b20_writebyte(uint8_t byte){
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	00 d0       	rcall	.+0      	; 0x154e <ds18b20_writebyte+0x6>
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=8;
    1554:	88 e0       	ldi	r24, 0x08	; 8
    1556:	89 83       	std	Y+1, r24	; 0x01
	while(i--){
    1558:	07 c0       	rjmp	.+14     	; 0x1568 <ds18b20_writebyte+0x20>
		ds18b20_writebit(byte&1);
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	81 70       	andi	r24, 0x01	; 1
    155e:	0e 94 9e 04 	call	0x93c	; 0x93c <ds18b20_writebit>
		byte >>= 1;
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	86 95       	lsr	r24
    1566:	8a 83       	std	Y+2, r24	; 0x02
/*
 * write one byte
 */
void ds18b20_writebyte(uint8_t byte){
	uint8_t i=8;
	while(i--){
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	9f ef       	ldi	r25, 0xFF	; 255
    156c:	98 0f       	add	r25, r24
    156e:	99 83       	std	Y+1, r25	; 0x01
    1570:	88 23       	and	r24, r24
    1572:	99 f7       	brne	.-26     	; 0x155a <ds18b20_writebyte+0x12>
		ds18b20_writebit(byte&1);
		byte >>= 1;
	}
}
    1574:	00 00       	nop
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	08 95       	ret

00001580 <ds18b20_readbyte>:

/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	00 d0       	rcall	.+0      	; 0x1586 <ds18b20_readbyte+0x6>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
	uint8_t i=8, n=0;
    158a:	88 e0       	ldi	r24, 0x08	; 8
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	1a 82       	std	Y+2, r1	; 0x02
	while(i--){
    1590:	10 c0       	rjmp	.+32     	; 0x15b2 <ds18b20_readbyte+0x32>
		n >>= 1;
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	86 95       	lsr	r24
    1596:	8a 83       	std	Y+2, r24	; 0x02
		n |= (ds18b20_readbit()<<7);
    1598:	0e 94 cf 06 	call	0xd9e	; 0xd9e <ds18b20_readbit>
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	96 95       	lsr	r25
    15a2:	98 2f       	mov	r25, r24
    15a4:	88 27       	eor	r24, r24
    15a6:	97 95       	ror	r25
    15a8:	87 95       	ror	r24
    15aa:	98 2f       	mov	r25, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	89 2b       	or	r24, r25
    15b0:	8a 83       	std	Y+2, r24	; 0x02
/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
	uint8_t i=8, n=0;
	while(i--){
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9f ef       	ldi	r25, 0xFF	; 255
    15b6:	98 0f       	add	r25, r24
    15b8:	99 83       	std	Y+1, r25	; 0x01
    15ba:	88 23       	and	r24, r24
    15bc:	51 f7       	brne	.-44     	; 0x1592 <ds18b20_readbyte+0x12>
		n >>= 1;
		n |= (ds18b20_readbit()<<7);
	}
	return n;
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <ds18b20_gettemp>:

/*
 * get temperature
 */
double ds18b20_gettemp() {
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <ds18b20_gettemp+0x6>
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <ds18b20_gettemp+0x8>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <ds18b20_gettemp+0xa>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
	uint8_t temperature_l;
	uint8_t temperature_h;
	double retd = 0;
    15d8:	19 82       	std	Y+1, r1	; 0x01
    15da:	1a 82       	std	Y+2, r1	; 0x02
    15dc:	1b 82       	std	Y+3, r1	; 0x03
    15de:	1c 82       	std	Y+4, r1	; 0x04

	#if DS18B20_STOPINTERRUPTONREAD == 1
	cli();
    15e0:	f8 94       	cli
	#endif

	ds18b20_reset(); //reset
    15e2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ds18b20_reset>
	
	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
    15e6:	8c ec       	ldi	r24, 0xCC	; 204
    15e8:	0e 94 a4 0a 	call	0x1548	; 0x1548 <ds18b20_writebyte>
	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
    15ec:	84 e4       	ldi	r24, 0x44	; 68
    15ee:	0e 94 a4 0a 	call	0x1548	; 0x1548 <ds18b20_writebyte>

	while(!ds18b20_readbit()); //wait until conversion is complete
    15f2:	00 00       	nop
    15f4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <ds18b20_readbit>
    15f8:	88 23       	and	r24, r24
    15fa:	e1 f3       	breq	.-8      	; 0x15f4 <ds18b20_gettemp+0x2a>


	ds18b20_reset(); //reset
    15fc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ds18b20_reset>
	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
    1600:	8c ec       	ldi	r24, 0xCC	; 204
    1602:	0e 94 a4 0a 	call	0x1548	; 0x1548 <ds18b20_writebyte>
	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
    1606:	8e eb       	ldi	r24, 0xBE	; 190
    1608:	0e 94 a4 0a 	call	0x1548	; 0x1548 <ds18b20_writebyte>

	//read 2 byte from scratchpad
	temperature_l = ds18b20_readbyte();
    160c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <ds18b20_readbyte>
    1610:	8d 83       	std	Y+5, r24	; 0x05
	temperature_h = ds18b20_readbyte();
    1612:	0e 94 c0 0a 	call	0x1580	; 0x1580 <ds18b20_readbyte>
    1616:	8e 83       	std	Y+6, r24	; 0x06

	#if DS18B20_STOPINTERRUPTONREAD == 1
	sei();
    1618:	78 94       	sei
	#endif

	//convert the 12 bit value obtained
	retd = ( ( temperature_h << 8 ) + temperature_l ) * 0.0625;
    161a:	8e 81       	ldd	r24, Y+6	; 0x06
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	38 2f       	mov	r19, r24
    1622:	22 27       	eor	r18, r18
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	88 2f       	mov	r24, r24
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	82 0f       	add	r24, r18
    162c:	93 1f       	adc	r25, r19
    162e:	09 2e       	mov	r0, r25
    1630:	00 0c       	add	r0, r0
    1632:	aa 0b       	sbc	r26, r26
    1634:	bb 0b       	sbc	r27, r27
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 bd 11 	call	0x237a	; 0x237a <__floatsisf>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e8       	ldi	r20, 0x80	; 128
    1648:	5d e3       	ldi	r21, 0x3D	; 61
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	9a 83       	std	Y+2, r25	; 0x02
    165a:	ab 83       	std	Y+3, r26	; 0x03
    165c:	bc 83       	std	Y+4, r27	; 0x04

	return retd;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	ab 81       	ldd	r26, Y+3	; 0x03
    1664:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	26 96       	adiw	r28, 0x06	; 6
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <lcd_command>:
  if (row > 1) {
    row = 1;
  }

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	1f 92       	push	r1
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <lcd_send>
    1690:	00 00       	nop
    1692:	0f 90       	pop	r0
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	08 95       	ret

0000169a <lcd_write>:
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	1f 92       	push	r1
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <lcd_send>
    16ae:	00 00       	nop
    16b0:	0f 90       	pop	r0
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	08 95       	ret

000016b8 <lcd_send>:
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	00 d0       	rcall	.+0      	; 0x16be <lcd_send+0x6>
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	6a 83       	std	Y+2, r22	; 0x02
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	88 23       	and	r24, r24
    16ca:	51 f0       	breq	.+20     	; 0x16e0 <lcd_send+0x28>
    16cc:	8b e2       	ldi	r24, 0x2B	; 43
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	2b e2       	ldi	r18, 0x2B	; 43
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	f9 01       	movw	r30, r18
    16d6:	20 81       	ld	r18, Z
    16d8:	22 60       	ori	r18, 0x02	; 2
    16da:	fc 01       	movw	r30, r24
    16dc:	20 83       	st	Z, r18
    16de:	09 c0       	rjmp	.+18     	; 0x16f2 <lcd_send+0x3a>
    16e0:	8b e2       	ldi	r24, 0x2B	; 43
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	2b e2       	ldi	r18, 0x2B	; 43
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	f9 01       	movw	r30, r18
    16ea:	20 81       	ld	r18, Z
    16ec:	2d 7f       	andi	r18, 0xFD	; 253
    16ee:	fc 01       	movw	r30, r24
    16f0:	20 83       	st	Z, r18
    16f2:	8b e2       	ldi	r24, 0x2B	; 43
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	2b e2       	ldi	r18, 0x2B	; 43
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	f9 01       	movw	r30, r18
    16fc:	20 81       	ld	r18, Z
    16fe:	2e 7f       	andi	r18, 0xFE	; 254
    1700:	fc 01       	movw	r30, r24
    1702:	20 83       	st	Z, r18
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	82 95       	swap	r24
    1708:	8f 70       	andi	r24, 0x0F	; 15
    170a:	0e 94 90 0b 	call	0x1720	; 0x1720 <lcd_write_nibble>
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	0e 94 90 0b 	call	0x1720	; 0x1720 <lcd_write_nibble>
    1714:	00 00       	nop
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	08 95       	ret

00001720 <lcd_write_nibble>:
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	2f 97       	sbiw	r28, 0x0f	; 15
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	8f 87       	std	Y+15, r24	; 0x0f
    1736:	8b e2       	ldi	r24, 0x2B	; 43
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	2b e2       	ldi	r18, 0x2B	; 43
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	f9 01       	movw	r30, r18
    1740:	20 81       	ld	r18, Z
    1742:	42 2f       	mov	r20, r18
    1744:	4f 70       	andi	r20, 0x0F	; 15
    1746:	2f 85       	ldd	r18, Y+15	; 0x0f
    1748:	22 2f       	mov	r18, r18
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	22 95       	swap	r18
    174e:	32 95       	swap	r19
    1750:	30 7f       	andi	r19, 0xF0	; 240
    1752:	32 27       	eor	r19, r18
    1754:	20 7f       	andi	r18, 0xF0	; 240
    1756:	32 27       	eor	r19, r18
    1758:	24 2b       	or	r18, r20
    175a:	fc 01       	movw	r30, r24
    175c:	20 83       	st	Z, r18
    175e:	8b e2       	ldi	r24, 0x2B	; 43
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	2b e2       	ldi	r18, 0x2B	; 43
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	f9 01       	movw	r30, r18
    1768:	20 81       	ld	r18, Z
    176a:	27 7f       	andi	r18, 0xF7	; 247
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18
    1770:	8b e2       	ldi	r24, 0x2B	; 43
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	2b e2       	ldi	r18, 0x2B	; 43
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	f9 01       	movw	r30, r18
    177a:	20 81       	ld	r18, Z
    177c:	28 60       	ori	r18, 0x08	; 8
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18
    1782:	8b e2       	ldi	r24, 0x2B	; 43
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	2b e2       	ldi	r18, 0x2B	; 43
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	f9 01       	movw	r30, r18
    178c:	20 81       	ld	r18, Z
    178e:	27 7f       	andi	r18, 0xF7	; 247
    1790:	fc 01       	movw	r30, r24
    1792:	20 83       	st	Z, r18
    1794:	8a e9       	ldi	r24, 0x9A	; 154
    1796:	99 e9       	ldi	r25, 0x99	; 153
    1798:	a9 e9       	ldi	r26, 0x99	; 153
    179a:	be e3       	ldi	r27, 0x3E	; 62
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	ab 83       	std	Y+3, r26	; 0x03
    17a2:	bc 83       	std	Y+4, r27	; 0x04
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	4a e7       	ldi	r20, 0x7A	; 122
    17aa:	53 e4       	ldi	r21, 0x43	; 67
    17ac:	69 81       	ldd	r22, Y+1	; 0x01
    17ae:	7a 81       	ldd	r23, Y+2	; 0x02
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	af 83       	std	Y+7, r26	; 0x07
    17c2:	b8 87       	std	Y+8, r27	; 0x08
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	6d 81       	ldd	r22, Y+5	; 0x05
    17ce:	7e 81       	ldd	r23, Y+6	; 0x06
    17d0:	8f 81       	ldd	r24, Y+7	; 0x07
    17d2:	98 85       	ldd	r25, Y+8	; 0x08
    17d4:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    17d8:	88 23       	and	r24, r24
    17da:	2c f4       	brge	.+10     	; 0x17e6 <lcd_write_nibble+0xc6>
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9a 87       	std	Y+10, r25	; 0x0a
    17e2:	89 87       	std	Y+9, r24	; 0x09
    17e4:	3f c0       	rjmp	.+126    	; 0x1864 <lcd_write_nibble+0x144>
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	3f ef       	ldi	r19, 0xFF	; 255
    17ea:	4f e7       	ldi	r20, 0x7F	; 127
    17ec:	57 e4       	ldi	r21, 0x47	; 71
    17ee:	6d 81       	ldd	r22, Y+5	; 0x05
    17f0:	7e 81       	ldd	r23, Y+6	; 0x06
    17f2:	8f 81       	ldd	r24, Y+7	; 0x07
    17f4:	98 85       	ldd	r25, Y+8	; 0x08
    17f6:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	4c f5       	brge	.+82     	; 0x1850 <lcd_write_nibble+0x130>
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e2       	ldi	r20, 0x20	; 32
    1804:	51 e4       	ldi	r21, 0x41	; 65
    1806:	69 81       	ldd	r22, Y+1	; 0x01
    1808:	7a 81       	ldd	r23, Y+2	; 0x02
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	9a 87       	std	Y+10, r25	; 0x0a
    1824:	89 87       	std	Y+9, r24	; 0x09
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <lcd_write_nibble+0x126>
    1828:	89 e1       	ldi	r24, 0x19	; 25
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9c 87       	std	Y+12, r25	; 0x0c
    182e:	8b 87       	std	Y+11, r24	; 0x0b
    1830:	8b 85       	ldd	r24, Y+11	; 0x0b
    1832:	9c 85       	ldd	r25, Y+12	; 0x0c
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <lcd_write_nibble+0x114>
    1838:	9c 87       	std	Y+12, r25	; 0x0c
    183a:	8b 87       	std	Y+11, r24	; 0x0b
    183c:	89 85       	ldd	r24, Y+9	; 0x09
    183e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	9a 87       	std	Y+10, r25	; 0x0a
    1844:	89 87       	std	Y+9, r24	; 0x09
    1846:	89 85       	ldd	r24, Y+9	; 0x09
    1848:	9a 85       	ldd	r25, Y+10	; 0x0a
    184a:	89 2b       	or	r24, r25
    184c:	69 f7       	brne	.-38     	; 0x1828 <lcd_write_nibble+0x108>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <lcd_write_nibble+0x158>
    1850:	6d 81       	ldd	r22, Y+5	; 0x05
    1852:	7e 81       	ldd	r23, Y+6	; 0x06
    1854:	8f 81       	ldd	r24, Y+7	; 0x07
    1856:	98 85       	ldd	r25, Y+8	; 0x08
    1858:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9a 87       	std	Y+10, r25	; 0x0a
    1862:	89 87       	std	Y+9, r24	; 0x09
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	9e 87       	std	Y+14, r25	; 0x0e
    186a:	8d 87       	std	Y+13, r24	; 0x0d
    186c:	8d 85       	ldd	r24, Y+13	; 0x0d
    186e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <lcd_write_nibble+0x150>
    1874:	9e 87       	std	Y+14, r25	; 0x0e
    1876:	8d 87       	std	Y+13, r24	; 0x0d
    1878:	00 00       	nop
    187a:	2f 96       	adiw	r28, 0x0f	; 15
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	08 95       	ret

0000188c <lcd_init>:
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	c6 54       	subi	r28, 0x46	; 70
    189a:	d1 09       	sbc	r29, r1
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	8a e2       	ldi	r24, 0x2A	; 42
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	2a e2       	ldi	r18, 0x2A	; 42
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	f9 01       	movw	r30, r18
    18b0:	20 81       	ld	r18, Z
    18b2:	2b 6f       	ori	r18, 0xFB	; 251
    18b4:	fc 01       	movw	r30, r24
    18b6:	20 83       	st	Z, r18
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e7       	ldi	r26, 0x70	; 112
    18be:	b1 e4       	ldi	r27, 0x41	; 65
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	9a 83       	std	Y+2, r25	; 0x02
    18c4:	ab 83       	std	Y+3, r26	; 0x03
    18c6:	bc 83       	std	Y+4, r27	; 0x04
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	4a e7       	ldi	r20, 0x7A	; 122
    18ce:	53 e4       	ldi	r21, 0x43	; 67
    18d0:	69 81       	ldd	r22, Y+1	; 0x01
    18d2:	7a 81       	ldd	r23, Y+2	; 0x02
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9e 01       	movw	r18, r28
    18e2:	23 5c       	subi	r18, 0xC3	; 195
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	f9 01       	movw	r30, r18
    18e8:	80 83       	st	Z, r24
    18ea:	91 83       	std	Z+1, r25	; 0x01
    18ec:	a2 83       	std	Z+2, r26	; 0x02
    18ee:	b3 83       	std	Z+3, r27	; 0x03
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	ce 01       	movw	r24, r28
    18fa:	cd 96       	adiw	r24, 0x3d	; 61
    18fc:	fc 01       	movw	r30, r24
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    190a:	88 23       	and	r24, r24
    190c:	4c f4       	brge	.+18     	; 0x1920 <lcd_init+0x94>
    190e:	ce 01       	movw	r24, r28
    1910:	8f 5b       	subi	r24, 0xBF	; 191
    1912:	9f 4f       	sbci	r25, 0xFF	; 255
    1914:	21 e0       	ldi	r18, 0x01	; 1
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	fc 01       	movw	r30, r24
    191a:	31 83       	std	Z+1, r19	; 0x01
    191c:	20 83       	st	Z, r18
    191e:	67 c0       	rjmp	.+206    	; 0x19ee <lcd_init+0x162>
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	ce 01       	movw	r24, r28
    192a:	cd 96       	adiw	r24, 0x3d	; 61
    192c:	fc 01       	movw	r30, r24
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    193a:	18 16       	cp	r1, r24
    193c:	0c f0       	brlt	.+2      	; 0x1940 <lcd_init+0xb4>
    193e:	46 c0       	rjmp	.+140    	; 0x19cc <lcd_init+0x140>
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e2       	ldi	r20, 0x20	; 32
    1946:	51 e4       	ldi	r21, 0x41	; 65
    1948:	69 81       	ldd	r22, Y+1	; 0x01
    194a:	7a 81       	ldd	r23, Y+2	; 0x02
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	8e 01       	movw	r16, r28
    195a:	0f 5b       	subi	r16, 0xBF	; 191
    195c:	1f 4f       	sbci	r17, 0xFF	; 255
    195e:	bc 01       	movw	r22, r24
    1960:	cd 01       	movw	r24, r26
    1962:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	f8 01       	movw	r30, r16
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
    1970:	24 c0       	rjmp	.+72     	; 0x19ba <lcd_init+0x12e>
    1972:	ce 01       	movw	r24, r28
    1974:	8d 5b       	subi	r24, 0xBD	; 189
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	29 e1       	ldi	r18, 0x19	; 25
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	fc 01       	movw	r30, r24
    197e:	31 83       	std	Z+1, r19	; 0x01
    1980:	20 83       	st	Z, r18
    1982:	ce 01       	movw	r24, r28
    1984:	8d 5b       	subi	r24, 0xBD	; 189
    1986:	9f 4f       	sbci	r25, 0xFF	; 255
    1988:	fc 01       	movw	r30, r24
    198a:	80 81       	ld	r24, Z
    198c:	91 81       	ldd	r25, Z+1	; 0x01
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	f1 f7       	brne	.-4      	; 0x198e <lcd_init+0x102>
    1992:	9e 01       	movw	r18, r28
    1994:	2d 5b       	subi	r18, 0xBD	; 189
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	f9 01       	movw	r30, r18
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	80 83       	st	Z, r24
    199e:	ce 01       	movw	r24, r28
    19a0:	8f 5b       	subi	r24, 0xBF	; 191
    19a2:	9f 4f       	sbci	r25, 0xFF	; 255
    19a4:	9e 01       	movw	r18, r28
    19a6:	2f 5b       	subi	r18, 0xBF	; 191
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	f9 01       	movw	r30, r18
    19ac:	20 81       	ld	r18, Z
    19ae:	31 81       	ldd	r19, Z+1	; 0x01
    19b0:	21 50       	subi	r18, 0x01	; 1
    19b2:	31 09       	sbc	r19, r1
    19b4:	fc 01       	movw	r30, r24
    19b6:	31 83       	std	Z+1, r19	; 0x01
    19b8:	20 83       	st	Z, r18
    19ba:	ce 01       	movw	r24, r28
    19bc:	8f 5b       	subi	r24, 0xBF	; 191
    19be:	9f 4f       	sbci	r25, 0xFF	; 255
    19c0:	fc 01       	movw	r30, r24
    19c2:	80 81       	ld	r24, Z
    19c4:	91 81       	ldd	r25, Z+1	; 0x01
    19c6:	89 2b       	or	r24, r25
    19c8:	a1 f6       	brne	.-88     	; 0x1972 <lcd_init+0xe6>
    19ca:	2b c0       	rjmp	.+86     	; 0x1a22 <lcd_init+0x196>
    19cc:	8e 01       	movw	r16, r28
    19ce:	0f 5b       	subi	r16, 0xBF	; 191
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	ce 01       	movw	r24, r28
    19d4:	cd 96       	adiw	r24, 0x3d	; 61
    19d6:	fc 01       	movw	r30, r24
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	f8 01       	movw	r30, r16
    19ea:	91 83       	std	Z+1, r25	; 0x01
    19ec:	80 83       	st	Z, r24
    19ee:	ce 01       	movw	r24, r28
    19f0:	8b 5b       	subi	r24, 0xBB	; 187
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
    19f4:	9e 01       	movw	r18, r28
    19f6:	2f 5b       	subi	r18, 0xBF	; 191
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	f9 01       	movw	r30, r18
    19fc:	20 81       	ld	r18, Z
    19fe:	31 81       	ldd	r19, Z+1	; 0x01
    1a00:	fc 01       	movw	r30, r24
    1a02:	31 83       	std	Z+1, r19	; 0x01
    1a04:	20 83       	st	Z, r18
    1a06:	ce 01       	movw	r24, r28
    1a08:	8b 5b       	subi	r24, 0xBB	; 187
    1a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	80 81       	ld	r24, Z
    1a10:	91 81       	ldd	r25, Z+1	; 0x01
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <lcd_init+0x186>
    1a16:	9e 01       	movw	r18, r28
    1a18:	2b 5b       	subi	r18, 0xBB	; 187
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	f9 01       	movw	r30, r18
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24
    1a22:	8b e2       	ldi	r24, 0x2B	; 43
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	2b e2       	ldi	r18, 0x2B	; 43
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	f9 01       	movw	r30, r18
    1a2c:	20 81       	ld	r18, Z
    1a2e:	24 7f       	andi	r18, 0xF4	; 244
    1a30:	fc 01       	movw	r30, r24
    1a32:	20 83       	st	Z, r18
    1a34:	83 e3       	ldi	r24, 0x33	; 51
    1a36:	93 e3       	ldi	r25, 0x33	; 51
    1a38:	a3 e8       	ldi	r26, 0x83	; 131
    1a3a:	b0 e4       	ldi	r27, 0x40	; 64
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	af 83       	std	Y+7, r26	; 0x07
    1a42:	b8 87       	std	Y+8, r27	; 0x08
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	4a e7       	ldi	r20, 0x7A	; 122
    1a4a:	53 e4       	ldi	r21, 0x43	; 67
    1a4c:	6d 81       	ldd	r22, Y+5	; 0x05
    1a4e:	7e 81       	ldd	r23, Y+6	; 0x06
    1a50:	8f 81       	ldd	r24, Y+7	; 0x07
    1a52:	98 85       	ldd	r25, Y+8	; 0x08
    1a54:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	8b ab       	std	Y+51, r24	; 0x33
    1a5e:	9c ab       	std	Y+52, r25	; 0x34
    1a60:	ad ab       	std	Y+53, r26	; 0x35
    1a62:	be ab       	std	Y+54, r27	; 0x36
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e8       	ldi	r20, 0x80	; 128
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	6b a9       	ldd	r22, Y+51	; 0x33
    1a6e:	7c a9       	ldd	r23, Y+52	; 0x34
    1a70:	8d a9       	ldd	r24, Y+53	; 0x35
    1a72:	9e a9       	ldd	r25, Y+54	; 0x36
    1a74:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    1a78:	88 23       	and	r24, r24
    1a7a:	2c f4       	brge	.+10     	; 0x1a86 <lcd_init+0x1fa>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	98 af       	std	Y+56, r25	; 0x38
    1a82:	8f ab       	std	Y+55, r24	; 0x37
    1a84:	3f c0       	rjmp	.+126    	; 0x1b04 <lcd_init+0x278>
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	3f ef       	ldi	r19, 0xFF	; 255
    1a8a:	4f e7       	ldi	r20, 0x7F	; 127
    1a8c:	57 e4       	ldi	r21, 0x47	; 71
    1a8e:	6b a9       	ldd	r22, Y+51	; 0x33
    1a90:	7c a9       	ldd	r23, Y+52	; 0x34
    1a92:	8d a9       	ldd	r24, Y+53	; 0x35
    1a94:	9e a9       	ldd	r25, Y+54	; 0x36
    1a96:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	4c f5       	brge	.+82     	; 0x1af0 <lcd_init+0x264>
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	51 e4       	ldi	r21, 0x41	; 65
    1aa6:	6d 81       	ldd	r22, Y+5	; 0x05
    1aa8:	7e 81       	ldd	r23, Y+6	; 0x06
    1aaa:	8f 81       	ldd	r24, Y+7	; 0x07
    1aac:	98 85       	ldd	r25, Y+8	; 0x08
    1aae:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	98 af       	std	Y+56, r25	; 0x38
    1ac4:	8f ab       	std	Y+55, r24	; 0x37
    1ac6:	0f c0       	rjmp	.+30     	; 0x1ae6 <lcd_init+0x25a>
    1ac8:	89 e1       	ldi	r24, 0x19	; 25
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9a af       	std	Y+58, r25	; 0x3a
    1ace:	89 af       	std	Y+57, r24	; 0x39
    1ad0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ad2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <lcd_init+0x248>
    1ad8:	9a af       	std	Y+58, r25	; 0x3a
    1ada:	89 af       	std	Y+57, r24	; 0x39
    1adc:	8f a9       	ldd	r24, Y+55	; 0x37
    1ade:	98 ad       	ldd	r25, Y+56	; 0x38
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	98 af       	std	Y+56, r25	; 0x38
    1ae4:	8f ab       	std	Y+55, r24	; 0x37
    1ae6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aea:	89 2b       	or	r24, r25
    1aec:	69 f7       	brne	.-38     	; 0x1ac8 <lcd_init+0x23c>
    1aee:	14 c0       	rjmp	.+40     	; 0x1b18 <lcd_init+0x28c>
    1af0:	6b a9       	ldd	r22, Y+51	; 0x33
    1af2:	7c a9       	ldd	r23, Y+52	; 0x34
    1af4:	8d a9       	ldd	r24, Y+53	; 0x35
    1af6:	9e a9       	ldd	r25, Y+54	; 0x36
    1af8:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	98 af       	std	Y+56, r25	; 0x38
    1b02:	8f ab       	std	Y+55, r24	; 0x37
    1b04:	8f a9       	ldd	r24, Y+55	; 0x37
    1b06:	98 ad       	ldd	r25, Y+56	; 0x38
    1b08:	9c af       	std	Y+60, r25	; 0x3c
    1b0a:	8b af       	std	Y+59, r24	; 0x3b
    1b0c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b0e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <lcd_init+0x284>
    1b14:	9c af       	std	Y+60, r25	; 0x3c
    1b16:	8b af       	std	Y+59, r24	; 0x3b
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	0e 94 90 0b 	call	0x1720	; 0x1720 <lcd_write_nibble>
    1b1e:	83 e3       	ldi	r24, 0x33	; 51
    1b20:	93 e3       	ldi	r25, 0x33	; 51
    1b22:	a3 e8       	ldi	r26, 0x83	; 131
    1b24:	b0 e4       	ldi	r27, 0x40	; 64
    1b26:	89 87       	std	Y+9, r24	; 0x09
    1b28:	9a 87       	std	Y+10, r25	; 0x0a
    1b2a:	ab 87       	std	Y+11, r26	; 0x0b
    1b2c:	bc 87       	std	Y+12, r27	; 0x0c
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	4a e7       	ldi	r20, 0x7A	; 122
    1b34:	53 e4       	ldi	r21, 0x43	; 67
    1b36:	69 85       	ldd	r22, Y+9	; 0x09
    1b38:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b3e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	89 a7       	std	Y+41, r24	; 0x29
    1b48:	9a a7       	std	Y+42, r25	; 0x2a
    1b4a:	ab a7       	std	Y+43, r26	; 0x2b
    1b4c:	bc a7       	std	Y+44, r27	; 0x2c
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	69 a5       	ldd	r22, Y+41	; 0x29
    1b58:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b5e:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    1b62:	88 23       	and	r24, r24
    1b64:	2c f4       	brge	.+10     	; 0x1b70 <lcd_init+0x2e4>
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9e a7       	std	Y+46, r25	; 0x2e
    1b6c:	8d a7       	std	Y+45, r24	; 0x2d
    1b6e:	3f c0       	rjmp	.+126    	; 0x1bee <lcd_init+0x362>
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	4f e7       	ldi	r20, 0x7F	; 127
    1b76:	57 e4       	ldi	r21, 0x47	; 71
    1b78:	69 a5       	ldd	r22, Y+41	; 0x29
    1b7a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b80:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    1b84:	18 16       	cp	r1, r24
    1b86:	4c f5       	brge	.+82     	; 0x1bda <lcd_init+0x34e>
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e2       	ldi	r20, 0x20	; 32
    1b8e:	51 e4       	ldi	r21, 0x41	; 65
    1b90:	69 85       	ldd	r22, Y+9	; 0x09
    1b92:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b94:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b96:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b98:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	9e a7       	std	Y+46, r25	; 0x2e
    1bae:	8d a7       	std	Y+45, r24	; 0x2d
    1bb0:	0f c0       	rjmp	.+30     	; 0x1bd0 <lcd_init+0x344>
    1bb2:	89 e1       	ldi	r24, 0x19	; 25
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	98 ab       	std	Y+48, r25	; 0x30
    1bb8:	8f a7       	std	Y+47, r24	; 0x2f
    1bba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bbc:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <lcd_init+0x332>
    1bc2:	98 ab       	std	Y+48, r25	; 0x30
    1bc4:	8f a7       	std	Y+47, r24	; 0x2f
    1bc6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bc8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	9e a7       	std	Y+46, r25	; 0x2e
    1bce:	8d a7       	std	Y+45, r24	; 0x2d
    1bd0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bd2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bd4:	89 2b       	or	r24, r25
    1bd6:	69 f7       	brne	.-38     	; 0x1bb2 <lcd_init+0x326>
    1bd8:	14 c0       	rjmp	.+40     	; 0x1c02 <lcd_init+0x376>
    1bda:	69 a5       	ldd	r22, Y+41	; 0x29
    1bdc:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bde:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be2:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9e a7       	std	Y+46, r25	; 0x2e
    1bec:	8d a7       	std	Y+45, r24	; 0x2d
    1bee:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bf0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bf2:	9a ab       	std	Y+50, r25	; 0x32
    1bf4:	89 ab       	std	Y+49, r24	; 0x31
    1bf6:	89 a9       	ldd	r24, Y+49	; 0x31
    1bf8:	9a a9       	ldd	r25, Y+50	; 0x32
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <lcd_init+0x36e>
    1bfe:	9a ab       	std	Y+50, r25	; 0x32
    1c00:	89 ab       	std	Y+49, r24	; 0x31
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	0e 94 90 0b 	call	0x1720	; 0x1720 <lcd_write_nibble>
    1c08:	83 e3       	ldi	r24, 0x33	; 51
    1c0a:	93 e3       	ldi	r25, 0x33	; 51
    1c0c:	a3 e8       	ldi	r26, 0x83	; 131
    1c0e:	b0 e4       	ldi	r27, 0x40	; 64
    1c10:	8d 87       	std	Y+13, r24	; 0x0d
    1c12:	9e 87       	std	Y+14, r25	; 0x0e
    1c14:	af 87       	std	Y+15, r26	; 0x0f
    1c16:	b8 8b       	std	Y+16, r27	; 0x10
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	4a e7       	ldi	r20, 0x7A	; 122
    1c1e:	53 e4       	ldi	r21, 0x43	; 67
    1c20:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c22:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c26:	98 89       	ldd	r25, Y+16	; 0x10
    1c28:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	8f 8f       	std	Y+31, r24	; 0x1f
    1c32:	98 a3       	std	Y+32, r25	; 0x20
    1c34:	a9 a3       	std	Y+33, r26	; 0x21
    1c36:	ba a3       	std	Y+34, r27	; 0x22
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e8       	ldi	r20, 0x80	; 128
    1c3e:	5f e3       	ldi	r21, 0x3F	; 63
    1c40:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c42:	78 a1       	ldd	r23, Y+32	; 0x20
    1c44:	89 a1       	ldd	r24, Y+33	; 0x21
    1c46:	9a a1       	ldd	r25, Y+34	; 0x22
    1c48:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    1c4c:	88 23       	and	r24, r24
    1c4e:	2c f4       	brge	.+10     	; 0x1c5a <lcd_init+0x3ce>
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9c a3       	std	Y+36, r25	; 0x24
    1c56:	8b a3       	std	Y+35, r24	; 0x23
    1c58:	3f c0       	rjmp	.+126    	; 0x1cd8 <lcd_init+0x44c>
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	3f ef       	ldi	r19, 0xFF	; 255
    1c5e:	4f e7       	ldi	r20, 0x7F	; 127
    1c60:	57 e4       	ldi	r21, 0x47	; 71
    1c62:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c64:	78 a1       	ldd	r23, Y+32	; 0x20
    1c66:	89 a1       	ldd	r24, Y+33	; 0x21
    1c68:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6a:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    1c6e:	18 16       	cp	r1, r24
    1c70:	4c f5       	brge	.+82     	; 0x1cc4 <lcd_init+0x438>
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e2       	ldi	r20, 0x20	; 32
    1c78:	51 e4       	ldi	r21, 0x41	; 65
    1c7a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c7c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c80:	98 89       	ldd	r25, Y+16	; 0x10
    1c82:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9c a3       	std	Y+36, r25	; 0x24
    1c98:	8b a3       	std	Y+35, r24	; 0x23
    1c9a:	0f c0       	rjmp	.+30     	; 0x1cba <lcd_init+0x42e>
    1c9c:	89 e1       	ldi	r24, 0x19	; 25
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9e a3       	std	Y+38, r25	; 0x26
    1ca2:	8d a3       	std	Y+37, r24	; 0x25
    1ca4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <lcd_init+0x41c>
    1cac:	9e a3       	std	Y+38, r25	; 0x26
    1cae:	8d a3       	std	Y+37, r24	; 0x25
    1cb0:	8b a1       	ldd	r24, Y+35	; 0x23
    1cb2:	9c a1       	ldd	r25, Y+36	; 0x24
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	9c a3       	std	Y+36, r25	; 0x24
    1cb8:	8b a3       	std	Y+35, r24	; 0x23
    1cba:	8b a1       	ldd	r24, Y+35	; 0x23
    1cbc:	9c a1       	ldd	r25, Y+36	; 0x24
    1cbe:	89 2b       	or	r24, r25
    1cc0:	69 f7       	brne	.-38     	; 0x1c9c <lcd_init+0x410>
    1cc2:	14 c0       	rjmp	.+40     	; 0x1cec <lcd_init+0x460>
    1cc4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cc6:	78 a1       	ldd	r23, Y+32	; 0x20
    1cc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cca:	9a a1       	ldd	r25, Y+34	; 0x22
    1ccc:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	9c a3       	std	Y+36, r25	; 0x24
    1cd6:	8b a3       	std	Y+35, r24	; 0x23
    1cd8:	8b a1       	ldd	r24, Y+35	; 0x23
    1cda:	9c a1       	ldd	r25, Y+36	; 0x24
    1cdc:	98 a7       	std	Y+40, r25	; 0x28
    1cde:	8f a3       	std	Y+39, r24	; 0x27
    1ce0:	8f a1       	ldd	r24, Y+39	; 0x27
    1ce2:	98 a5       	ldd	r25, Y+40	; 0x28
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <lcd_init+0x458>
    1ce8:	98 a7       	std	Y+40, r25	; 0x28
    1cea:	8f a3       	std	Y+39, r24	; 0x27
    1cec:	83 e0       	ldi	r24, 0x03	; 3
    1cee:	0e 94 90 0b 	call	0x1720	; 0x1720 <lcd_write_nibble>
    1cf2:	83 e3       	ldi	r24, 0x33	; 51
    1cf4:	93 e3       	ldi	r25, 0x33	; 51
    1cf6:	a3 e8       	ldi	r26, 0x83	; 131
    1cf8:	b0 e4       	ldi	r27, 0x40	; 64
    1cfa:	89 8b       	std	Y+17, r24	; 0x11
    1cfc:	9a 8b       	std	Y+18, r25	; 0x12
    1cfe:	ab 8b       	std	Y+19, r26	; 0x13
    1d00:	bc 8b       	std	Y+20, r27	; 0x14
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	4a e7       	ldi	r20, 0x7A	; 122
    1d08:	53 e4       	ldi	r21, 0x43	; 67
    1d0a:	69 89       	ldd	r22, Y+17	; 0x11
    1d0c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d10:	9c 89       	ldd	r25, Y+20	; 0x14
    1d12:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8d 8b       	std	Y+21, r24	; 0x15
    1d1c:	9e 8b       	std	Y+22, r25	; 0x16
    1d1e:	af 8b       	std	Y+23, r26	; 0x17
    1d20:	b8 8f       	std	Y+24, r27	; 0x18
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e8       	ldi	r20, 0x80	; 128
    1d28:	5f e3       	ldi	r21, 0x3F	; 63
    1d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d30:	98 8d       	ldd	r25, Y+24	; 0x18
    1d32:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <lcd_init+0x4b8>
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d40:	89 8f       	std	Y+25, r24	; 0x19
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <lcd_init+0x536>
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	3f ef       	ldi	r19, 0xFF	; 255
    1d48:	4f e7       	ldi	r20, 0x7F	; 127
    1d4a:	57 e4       	ldi	r21, 0x47	; 71
    1d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d50:	8f 89       	ldd	r24, Y+23	; 0x17
    1d52:	98 8d       	ldd	r25, Y+24	; 0x18
    1d54:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <lcd_init+0x522>
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e2       	ldi	r20, 0x20	; 32
    1d62:	51 e4       	ldi	r21, 0x41	; 65
    1d64:	69 89       	ldd	r22, Y+17	; 0x11
    1d66:	7a 89       	ldd	r23, Y+18	; 0x12
    1d68:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9a 8f       	std	Y+26, r25	; 0x1a
    1d82:	89 8f       	std	Y+25, r24	; 0x19
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <lcd_init+0x518>
    1d86:	89 e1       	ldi	r24, 0x19	; 25
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9c 8f       	std	Y+28, r25	; 0x1c
    1d8c:	8b 8f       	std	Y+27, r24	; 0x1b
    1d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <lcd_init+0x506>
    1d96:	9c 8f       	std	Y+28, r25	; 0x1c
    1d98:	8b 8f       	std	Y+27, r24	; 0x1b
    1d9a:	89 8d       	ldd	r24, Y+25	; 0x19
    1d9c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9a 8f       	std	Y+26, r25	; 0x1a
    1da2:	89 8f       	std	Y+25, r24	; 0x19
    1da4:	89 8d       	ldd	r24, Y+25	; 0x19
    1da6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1da8:	89 2b       	or	r24, r25
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <lcd_init+0x4fa>
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <lcd_init+0x54a>
    1dae:	6d 89       	ldd	r22, Y+21	; 0x15
    1db0:	7e 89       	ldd	r23, Y+22	; 0x16
    1db2:	8f 89       	ldd	r24, Y+23	; 0x17
    1db4:	98 8d       	ldd	r25, Y+24	; 0x18
    1db6:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9a 8f       	std	Y+26, r25	; 0x1a
    1dc0:	89 8f       	std	Y+25, r24	; 0x19
    1dc2:	89 8d       	ldd	r24, Y+25	; 0x19
    1dc4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1dc6:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc8:	8d 8f       	std	Y+29, r24	; 0x1d
    1dca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dcc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <lcd_init+0x542>
    1dd2:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd4:	8d 8f       	std	Y+29, r24	; 0x1d
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	0e 94 90 0b 	call	0x1720	; 0x1720 <lcd_write_nibble>
    1ddc:	88 e2       	ldi	r24, 0x28	; 40
    1dde:	0e 94 3e 0b 	call	0x167c	; 0x167c <lcd_command>
    1de2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
    1de6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    1dea:	88 60       	ori	r24, 0x08	; 8
    1dec:	0e 94 3e 0b 	call	0x167c	; 0x167c <lcd_command>
    1df0:	00 00       	nop
    1df2:	ca 5b       	subi	r28, 0xBA	; 186
    1df4:	df 4f       	sbci	r29, 0xFF	; 255
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	08 95       	ret

00001e0a <lcd_on>:
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    1e16:	84 60       	ori	r24, 0x04	; 4
    1e18:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
    1e1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    1e20:	88 60       	ori	r24, 0x08	; 8
    1e22:	0e 94 3e 0b 	call	0x167c	; 0x167c <lcd_command>
    1e26:	00 00       	nop
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	08 95       	ret

00001e2e <lcd_clear>:
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	2e 97       	sbiw	r28, 0x0e	; 14
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	0e 94 3e 0b 	call	0x167c	; 0x167c <lcd_command>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a0 e0       	ldi	r26, 0x00	; 0
    1e4e:	b0 e4       	ldi	r27, 0x40	; 64
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	ab 83       	std	Y+3, r26	; 0x03
    1e56:	bc 83       	std	Y+4, r27	; 0x04
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4a e7       	ldi	r20, 0x7A	; 122
    1e5e:	53 e4       	ldi	r21, 0x43	; 67
    1e60:	69 81       	ldd	r22, Y+1	; 0x01
    1e62:	7a 81       	ldd	r23, Y+2	; 0x02
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	af 83       	std	Y+7, r26	; 0x07
    1e76:	b8 87       	std	Y+8, r27	; 0x08
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e8       	ldi	r20, 0x80	; 128
    1e7e:	5f e3       	ldi	r21, 0x3F	; 63
    1e80:	6d 81       	ldd	r22, Y+5	; 0x05
    1e82:	7e 81       	ldd	r23, Y+6	; 0x06
    1e84:	8f 81       	ldd	r24, Y+7	; 0x07
    1e86:	98 85       	ldd	r25, Y+8	; 0x08
    1e88:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <lcd_clear+0x6c>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9a 87       	std	Y+10, r25	; 0x0a
    1e96:	89 87       	std	Y+9, r24	; 0x09
    1e98:	3f c0       	rjmp	.+126    	; 0x1f18 <lcd_clear+0xea>
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	3f ef       	ldi	r19, 0xFF	; 255
    1e9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ea0:	57 e4       	ldi	r21, 0x47	; 71
    1ea2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ea4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ea6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea8:	98 85       	ldd	r25, Y+8	; 0x08
    1eaa:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    1eae:	18 16       	cp	r1, r24
    1eb0:	4c f5       	brge	.+82     	; 0x1f04 <lcd_clear+0xd6>
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	69 81       	ldd	r22, Y+1	; 0x01
    1ebc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	9a 87       	std	Y+10, r25	; 0x0a
    1ed8:	89 87       	std	Y+9, r24	; 0x09
    1eda:	0f c0       	rjmp	.+30     	; 0x1efa <lcd_clear+0xcc>
    1edc:	89 e1       	ldi	r24, 0x19	; 25
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9c 87       	std	Y+12, r25	; 0x0c
    1ee2:	8b 87       	std	Y+11, r24	; 0x0b
    1ee4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ee6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <lcd_clear+0xba>
    1eec:	9c 87       	std	Y+12, r25	; 0x0c
    1eee:	8b 87       	std	Y+11, r24	; 0x0b
    1ef0:	89 85       	ldd	r24, Y+9	; 0x09
    1ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	9a 87       	std	Y+10, r25	; 0x0a
    1ef8:	89 87       	std	Y+9, r24	; 0x09
    1efa:	89 85       	ldd	r24, Y+9	; 0x09
    1efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efe:	89 2b       	or	r24, r25
    1f00:	69 f7       	brne	.-38     	; 0x1edc <lcd_clear+0xae>
    1f02:	14 c0       	rjmp	.+40     	; 0x1f2c <lcd_clear+0xfe>
    1f04:	6d 81       	ldd	r22, Y+5	; 0x05
    1f06:	7e 81       	ldd	r23, Y+6	; 0x06
    1f08:	8f 81       	ldd	r24, Y+7	; 0x07
    1f0a:	98 85       	ldd	r25, Y+8	; 0x08
    1f0c:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9a 87       	std	Y+10, r25	; 0x0a
    1f16:	89 87       	std	Y+9, r24	; 0x09
    1f18:	89 85       	ldd	r24, Y+9	; 0x09
    1f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1c:	9e 87       	std	Y+14, r25	; 0x0e
    1f1e:	8d 87       	std	Y+13, r24	; 0x0d
    1f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <lcd_clear+0xf6>
    1f28:	9e 87       	std	Y+14, r25	; 0x0e
    1f2a:	8d 87       	std	Y+13, r24	; 0x0d
    1f2c:	00 00       	nop
    1f2e:	2e 96       	adiw	r28, 0x0e	; 14
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	08 95       	ret

00001f40 <lcd_set_left_to_right>:
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    1f4c:	82 60       	ori	r24, 0x02	; 2
    1f4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
    1f52:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    1f56:	84 60       	ori	r24, 0x04	; 4
    1f58:	0e 94 3e 0b 	call	0x167c	; 0x167c <lcd_command>
    1f5c:	00 00       	nop
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	08 95       	ret

00001f64 <lcd_puts>:

void lcd_puts(char *string) {
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <lcd_puts+0x6>
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <lcd_puts+0x8>
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	9c 83       	std	Y+4, r25	; 0x04
    1f72:	8b 83       	std	Y+3, r24	; 0x03
  for (char *it = string; *it; it++) {
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	0b c0       	rjmp	.+22     	; 0x1f94 <lcd_puts+0x30>
    lcd_write(*it);
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	fc 01       	movw	r30, r24
    1f84:	80 81       	ld	r24, Z
    1f86:	0e 94 4d 0b 	call	0x169a	; 0x169a <lcd_write>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8e:	01 96       	adiw	r24, 0x01	; 1
    1f90:	9a 83       	std	Y+2, r25	; 0x02
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	fc 01       	movw	r30, r24
    1f9a:	80 81       	ld	r24, Z
    1f9c:	88 23       	and	r24, r24
    1f9e:	79 f7       	brne	.-34     	; 0x1f7e <lcd_puts+0x1a>
    lcd_write(*it);
  }
}
    1fa0:	00 00       	nop
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	08 95       	ret

00001fb0 <main>:

#include "ds18b20.h"
#include "lcd.h"
uint8_t subzero, cel, cel_fract_bits;
uint8_t czujniki_cnt;	
int main(void){
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	c4 58       	subi	r28, 0x84	; 132
    1fbe:	d1 09       	sbc	r29, r1
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
	
	lcd_init();
    1fca:	0e 94 46 0c 	call	0x188c	; 0x188c <lcd_init>
	lcd_set_left_to_right();
    1fce:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <lcd_set_left_to_right>
	lcd_on();
    1fd2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <lcd_on>
	lcd_clear();
    1fd6:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <lcd_clear>

	char printbuff[100];
	double d = 0;
    1fda:	19 82       	std	Y+1, r1	; 0x01
    1fdc:	1a 82       	std	Y+2, r1	; 0x02
    1fde:	1b 82       	std	Y+3, r1	; 0x03
    1fe0:	1c 82       	std	Y+4, r1	; 0x04
	
	while(1){
		d = (int) ds18b20_gettemp() * 100.0;
    1fe2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <ds18b20_gettemp>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	0e 94 85 11 	call	0x230a	; 0x230a <__fixsfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	09 2e       	mov	r0, r25
    1ff8:	00 0c       	add	r0, r0
    1ffa:	aa 0b       	sbc	r26, r26
    1ffc:	bb 0b       	sbc	r27, r27
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 bd 11 	call	0x237a	; 0x237a <__floatsisf>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	48 ec       	ldi	r20, 0xC8	; 200
    2010:	52 e4       	ldi	r21, 0x42	; 66
    2012:	bc 01       	movw	r22, r24
    2014:	cd 01       	movw	r24, r26
    2016:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	ab 83       	std	Y+3, r26	; 0x03
    2024:	bc 83       	std	Y+4, r27	; 0x04

		dtostrf(d, 10, 3, printbuff);
    2026:	9e 01       	movw	r18, r28
    2028:	2f 5d       	subi	r18, 0xDF	; 223
    202a:	3f 4f       	sbci	r19, 0xFF	; 255
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	9a 81       	ldd	r25, Y+2	; 0x02
    2030:	ab 81       	ldd	r26, Y+3	; 0x03
    2032:	bc 81       	ldd	r27, Y+4	; 0x04
    2034:	89 01       	movw	r16, r18
    2036:	23 e0       	ldi	r18, 0x03	; 3
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4a e0       	ldi	r20, 0x0A	; 10
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	0e 94 df 12 	call	0x25be	; 0x25be <dtostrf>
		lcd_puts(printbuff);
    2046:	ce 01       	movw	r24, r28
    2048:	81 96       	adiw	r24, 0x21	; 33
    204a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <lcd_puts>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a8 ec       	ldi	r26, 0xC8	; 200
    2054:	b2 e4       	ldi	r27, 0x42	; 66
    2056:	8d 83       	std	Y+5, r24	; 0x05
    2058:	9e 83       	std	Y+6, r25	; 0x06
    205a:	af 83       	std	Y+7, r26	; 0x07
    205c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	4a e7       	ldi	r20, 0x7A	; 122
    2064:	53 e4       	ldi	r21, 0x43	; 67
    2066:	6d 81       	ldd	r22, Y+5	; 0x05
    2068:	7e 81       	ldd	r23, Y+6	; 0x06
    206a:	8f 81       	ldd	r24, Y+7	; 0x07
    206c:	98 85       	ldd	r25, Y+8	; 0x08
    206e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	8f 8b       	std	Y+23, r24	; 0x17
    2078:	98 8f       	std	Y+24, r25	; 0x18
    207a:	a9 8f       	std	Y+25, r26	; 0x19
    207c:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	6f 89       	ldd	r22, Y+23	; 0x17
    2088:	78 8d       	ldd	r23, Y+24	; 0x18
    208a:	89 8d       	ldd	r24, Y+25	; 0x19
    208c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    208e:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    2092:	88 23       	and	r24, r24
    2094:	2c f4       	brge	.+10     	; 0x20a0 <main+0xf0>
		__ticks = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9c 8f       	std	Y+28, r25	; 0x1c
    209c:	8b 8f       	std	Y+27, r24	; 0x1b
    209e:	3f c0       	rjmp	.+126    	; 0x211e <main+0x16e>
	else if (__tmp > 65535)
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	57 e4       	ldi	r21, 0x47	; 71
    20a8:	6f 89       	ldd	r22, Y+23	; 0x17
    20aa:	78 8d       	ldd	r23, Y+24	; 0x18
    20ac:	89 8d       	ldd	r24, Y+25	; 0x19
    20ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20b0:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	4c f5       	brge	.+82     	; 0x210a <main+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e2       	ldi	r20, 0x20	; 32
    20be:	51 e4       	ldi	r21, 0x41	; 65
    20c0:	6d 81       	ldd	r22, Y+5	; 0x05
    20c2:	7e 81       	ldd	r23, Y+6	; 0x06
    20c4:	8f 81       	ldd	r24, Y+7	; 0x07
    20c6:	98 85       	ldd	r25, Y+8	; 0x08
    20c8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9c 8f       	std	Y+28, r25	; 0x1c
    20de:	8b 8f       	std	Y+27, r24	; 0x1b
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <main+0x150>
    20e2:	89 e1       	ldi	r24, 0x19	; 25
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9e 8f       	std	Y+30, r25	; 0x1e
    20e8:	8d 8f       	std	Y+29, r24	; 0x1d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <main+0x13e>
    20f2:	9e 8f       	std	Y+30, r25	; 0x1e
    20f4:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	9c 8f       	std	Y+28, r25	; 0x1c
    20fe:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2102:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2104:	89 2b       	or	r24, r25
    2106:	69 f7       	brne	.-38     	; 0x20e2 <main+0x132>
    2108:	14 c0       	rjmp	.+40     	; 0x2132 <main+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210a:	6f 89       	ldd	r22, Y+23	; 0x17
    210c:	78 8d       	ldd	r23, Y+24	; 0x18
    210e:	89 8d       	ldd	r24, Y+25	; 0x19
    2110:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2112:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9c 8f       	std	Y+28, r25	; 0x1c
    211c:	8b 8f       	std	Y+27, r24	; 0x1b
    211e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2120:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2122:	98 a3       	std	Y+32, r25	; 0x20
    2124:	8f 8f       	std	Y+31, r24	; 0x1f
    2126:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2128:	98 a1       	ldd	r25, Y+32	; 0x20
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <main+0x17a>
    212e:	98 a3       	std	Y+32, r25	; 0x20
    2130:	8f 8f       	std	Y+31, r24	; 0x1f
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	aa ef       	ldi	r26, 0xFA	; 250
    2138:	b3 e4       	ldi	r27, 0x43	; 67
    213a:	89 87       	std	Y+9, r24	; 0x09
    213c:	9a 87       	std	Y+10, r25	; 0x0a
    213e:	ab 87       	std	Y+11, r26	; 0x0b
    2140:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a e7       	ldi	r20, 0x7A	; 122
    2148:	53 e4       	ldi	r21, 0x43	; 67
    214a:	69 85       	ldd	r22, Y+9	; 0x09
    214c:	7a 85       	ldd	r23, Y+10	; 0x0a
    214e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2150:	9c 85       	ldd	r25, Y+12	; 0x0c
    2152:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8d 87       	std	Y+13, r24	; 0x0d
    215c:	9e 87       	std	Y+14, r25	; 0x0e
    215e:	af 87       	std	Y+15, r26	; 0x0f
    2160:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	6d 85       	ldd	r22, Y+13	; 0x0d
    216c:	7e 85       	ldd	r23, Y+14	; 0x0e
    216e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2170:	98 89       	ldd	r25, Y+16	; 0x10
    2172:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
    2176:	88 23       	and	r24, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <main+0x1d4>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9a 8b       	std	Y+18, r25	; 0x12
    2180:	89 8b       	std	Y+17, r24	; 0x11
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <main+0x252>
	else if (__tmp > 65535)
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	6d 85       	ldd	r22, Y+13	; 0x0d
    218e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2190:	8f 85       	ldd	r24, Y+15	; 0x0f
    2192:	98 89       	ldd	r25, Y+16	; 0x10
    2194:	0e 94 6d 12 	call	0x24da	; 0x24da <__gesf2>
    2198:	18 16       	cp	r1, r24
    219a:	4c f5       	brge	.+82     	; 0x21ee <main+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	69 85       	ldd	r22, Y+9	; 0x09
    21a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    21a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    21aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    21ac:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9a 8b       	std	Y+18, r25	; 0x12
    21c2:	89 8b       	std	Y+17, r24	; 0x11
    21c4:	0f c0       	rjmp	.+30     	; 0x21e4 <main+0x234>
    21c6:	89 e1       	ldi	r24, 0x19	; 25
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9c 8b       	std	Y+20, r25	; 0x14
    21cc:	8b 8b       	std	Y+19, r24	; 0x13
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <main+0x222>
    21d6:	9c 8b       	std	Y+20, r25	; 0x14
    21d8:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21da:	89 89       	ldd	r24, Y+17	; 0x11
    21dc:	9a 89       	ldd	r25, Y+18	; 0x12
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	9a 8b       	std	Y+18, r25	; 0x12
    21e2:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e4:	89 89       	ldd	r24, Y+17	; 0x11
    21e6:	9a 89       	ldd	r25, Y+18	; 0x12
    21e8:	89 2b       	or	r24, r25
    21ea:	69 f7       	brne	.-38     	; 0x21c6 <main+0x216>
    21ec:	14 c0       	rjmp	.+40     	; 0x2216 <main+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ee:	6d 85       	ldd	r22, Y+13	; 0x0d
    21f0:	7e 85       	ldd	r23, Y+14	; 0x0e
    21f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f4:	98 89       	ldd	r25, Y+16	; 0x10
    21f6:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9a 8b       	std	Y+18, r25	; 0x12
    2200:	89 8b       	std	Y+17, r24	; 0x11
    2202:	89 89       	ldd	r24, Y+17	; 0x11
    2204:	9a 89       	ldd	r25, Y+18	; 0x12
    2206:	9e 8b       	std	Y+22, r25	; 0x16
    2208:	8d 8b       	std	Y+21, r24	; 0x15
    220a:	8d 89       	ldd	r24, Y+21	; 0x15
    220c:	9e 89       	ldd	r25, Y+22	; 0x16
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <main+0x25e>
    2212:	9e 8b       	std	Y+22, r25	; 0x16
    2214:	8d 8b       	std	Y+21, r24	; 0x15

		_delay_ms(100);
		_delay_ms(500);
		lcd_clear();
    2216:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <lcd_clear>
		
	}
    221a:	e3 ce       	rjmp	.-570    	; 0x1fe2 <main+0x32>

0000221c <__cmpsf2>:
    221c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__fp_cmp>
    2220:	08 f4       	brcc	.+2      	; 0x2224 <__cmpsf2+0x8>
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	08 95       	ret

00002226 <__divsf3>:
    2226:	0e 94 27 11 	call	0x224e	; 0x224e <__divsf3x>
    222a:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__fp_round>
    222e:	0e 94 2c 12 	call	0x2458	; 0x2458 <__fp_pscB>
    2232:	58 f0       	brcs	.+22     	; 0x224a <__divsf3+0x24>
    2234:	0e 94 25 12 	call	0x244a	; 0x244a <__fp_pscA>
    2238:	40 f0       	brcs	.+16     	; 0x224a <__divsf3+0x24>
    223a:	29 f4       	brne	.+10     	; 0x2246 <__divsf3+0x20>
    223c:	5f 3f       	cpi	r21, 0xFF	; 255
    223e:	29 f0       	breq	.+10     	; 0x224a <__divsf3+0x24>
    2240:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__fp_inf>
    2244:	51 11       	cpse	r21, r1
    2246:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_szero>
    224a:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__fp_nan>

0000224e <__divsf3x>:
    224e:	0e 94 44 12 	call	0x2488	; 0x2488 <__fp_split3>
    2252:	68 f3       	brcs	.-38     	; 0x222e <__divsf3+0x8>

00002254 <__divsf3_pse>:
    2254:	99 23       	and	r25, r25
    2256:	b1 f3       	breq	.-20     	; 0x2244 <__divsf3+0x1e>
    2258:	55 23       	and	r21, r21
    225a:	91 f3       	breq	.-28     	; 0x2240 <__divsf3+0x1a>
    225c:	95 1b       	sub	r25, r21
    225e:	55 0b       	sbc	r21, r21
    2260:	bb 27       	eor	r27, r27
    2262:	aa 27       	eor	r26, r26
    2264:	62 17       	cp	r22, r18
    2266:	73 07       	cpc	r23, r19
    2268:	84 07       	cpc	r24, r20
    226a:	38 f0       	brcs	.+14     	; 0x227a <__divsf3_pse+0x26>
    226c:	9f 5f       	subi	r25, 0xFF	; 255
    226e:	5f 4f       	sbci	r21, 0xFF	; 255
    2270:	22 0f       	add	r18, r18
    2272:	33 1f       	adc	r19, r19
    2274:	44 1f       	adc	r20, r20
    2276:	aa 1f       	adc	r26, r26
    2278:	a9 f3       	breq	.-22     	; 0x2264 <__divsf3_pse+0x10>
    227a:	35 d0       	rcall	.+106    	; 0x22e6 <__divsf3_pse+0x92>
    227c:	0e 2e       	mov	r0, r30
    227e:	3a f0       	brmi	.+14     	; 0x228e <__divsf3_pse+0x3a>
    2280:	e0 e8       	ldi	r30, 0x80	; 128
    2282:	32 d0       	rcall	.+100    	; 0x22e8 <__divsf3_pse+0x94>
    2284:	91 50       	subi	r25, 0x01	; 1
    2286:	50 40       	sbci	r21, 0x00	; 0
    2288:	e6 95       	lsr	r30
    228a:	00 1c       	adc	r0, r0
    228c:	ca f7       	brpl	.-14     	; 0x2280 <__divsf3_pse+0x2c>
    228e:	2b d0       	rcall	.+86     	; 0x22e6 <__divsf3_pse+0x92>
    2290:	fe 2f       	mov	r31, r30
    2292:	29 d0       	rcall	.+82     	; 0x22e6 <__divsf3_pse+0x92>
    2294:	66 0f       	add	r22, r22
    2296:	77 1f       	adc	r23, r23
    2298:	88 1f       	adc	r24, r24
    229a:	bb 1f       	adc	r27, r27
    229c:	26 17       	cp	r18, r22
    229e:	37 07       	cpc	r19, r23
    22a0:	48 07       	cpc	r20, r24
    22a2:	ab 07       	cpc	r26, r27
    22a4:	b0 e8       	ldi	r27, 0x80	; 128
    22a6:	09 f0       	breq	.+2      	; 0x22aa <__divsf3_pse+0x56>
    22a8:	bb 0b       	sbc	r27, r27
    22aa:	80 2d       	mov	r24, r0
    22ac:	bf 01       	movw	r22, r30
    22ae:	ff 27       	eor	r31, r31
    22b0:	93 58       	subi	r25, 0x83	; 131
    22b2:	5f 4f       	sbci	r21, 0xFF	; 255
    22b4:	3a f0       	brmi	.+14     	; 0x22c4 <__divsf3_pse+0x70>
    22b6:	9e 3f       	cpi	r25, 0xFE	; 254
    22b8:	51 05       	cpc	r21, r1
    22ba:	78 f0       	brcs	.+30     	; 0x22da <__divsf3_pse+0x86>
    22bc:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__fp_inf>
    22c0:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_szero>
    22c4:	5f 3f       	cpi	r21, 0xFF	; 255
    22c6:	e4 f3       	brlt	.-8      	; 0x22c0 <__divsf3_pse+0x6c>
    22c8:	98 3e       	cpi	r25, 0xE8	; 232
    22ca:	d4 f3       	brlt	.-12     	; 0x22c0 <__divsf3_pse+0x6c>
    22cc:	86 95       	lsr	r24
    22ce:	77 95       	ror	r23
    22d0:	67 95       	ror	r22
    22d2:	b7 95       	ror	r27
    22d4:	f7 95       	ror	r31
    22d6:	9f 5f       	subi	r25, 0xFF	; 255
    22d8:	c9 f7       	brne	.-14     	; 0x22cc <__divsf3_pse+0x78>
    22da:	88 0f       	add	r24, r24
    22dc:	91 1d       	adc	r25, r1
    22de:	96 95       	lsr	r25
    22e0:	87 95       	ror	r24
    22e2:	97 f9       	bld	r25, 7
    22e4:	08 95       	ret
    22e6:	e1 e0       	ldi	r30, 0x01	; 1
    22e8:	66 0f       	add	r22, r22
    22ea:	77 1f       	adc	r23, r23
    22ec:	88 1f       	adc	r24, r24
    22ee:	bb 1f       	adc	r27, r27
    22f0:	62 17       	cp	r22, r18
    22f2:	73 07       	cpc	r23, r19
    22f4:	84 07       	cpc	r24, r20
    22f6:	ba 07       	cpc	r27, r26
    22f8:	20 f0       	brcs	.+8      	; 0x2302 <__divsf3_pse+0xae>
    22fa:	62 1b       	sub	r22, r18
    22fc:	73 0b       	sbc	r23, r19
    22fe:	84 0b       	sbc	r24, r20
    2300:	ba 0b       	sbc	r27, r26
    2302:	ee 1f       	adc	r30, r30
    2304:	88 f7       	brcc	.-30     	; 0x22e8 <__divsf3_pse+0x94>
    2306:	e0 95       	com	r30
    2308:	08 95       	ret

0000230a <__fixsfsi>:
    230a:	0e 94 8c 11 	call	0x2318	; 0x2318 <__fixunssfsi>
    230e:	68 94       	set
    2310:	b1 11       	cpse	r27, r1
    2312:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_szero>
    2316:	08 95       	ret

00002318 <__fixunssfsi>:
    2318:	0e 94 4c 12 	call	0x2498	; 0x2498 <__fp_splitA>
    231c:	88 f0       	brcs	.+34     	; 0x2340 <__fixunssfsi+0x28>
    231e:	9f 57       	subi	r25, 0x7F	; 127
    2320:	98 f0       	brcs	.+38     	; 0x2348 <__fixunssfsi+0x30>
    2322:	b9 2f       	mov	r27, r25
    2324:	99 27       	eor	r25, r25
    2326:	b7 51       	subi	r27, 0x17	; 23
    2328:	b0 f0       	brcs	.+44     	; 0x2356 <__fixunssfsi+0x3e>
    232a:	e1 f0       	breq	.+56     	; 0x2364 <__fixunssfsi+0x4c>
    232c:	66 0f       	add	r22, r22
    232e:	77 1f       	adc	r23, r23
    2330:	88 1f       	adc	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	1a f0       	brmi	.+6      	; 0x233c <__fixunssfsi+0x24>
    2336:	ba 95       	dec	r27
    2338:	c9 f7       	brne	.-14     	; 0x232c <__fixunssfsi+0x14>
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <__fixunssfsi+0x4c>
    233c:	b1 30       	cpi	r27, 0x01	; 1
    233e:	91 f0       	breq	.+36     	; 0x2364 <__fixunssfsi+0x4c>
    2340:	0e 94 66 12 	call	0x24cc	; 0x24cc <__fp_zero>
    2344:	b1 e0       	ldi	r27, 0x01	; 1
    2346:	08 95       	ret
    2348:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__fp_zero>
    234c:	67 2f       	mov	r22, r23
    234e:	78 2f       	mov	r23, r24
    2350:	88 27       	eor	r24, r24
    2352:	b8 5f       	subi	r27, 0xF8	; 248
    2354:	39 f0       	breq	.+14     	; 0x2364 <__fixunssfsi+0x4c>
    2356:	b9 3f       	cpi	r27, 0xF9	; 249
    2358:	cc f3       	brlt	.-14     	; 0x234c <__fixunssfsi+0x34>
    235a:	86 95       	lsr	r24
    235c:	77 95       	ror	r23
    235e:	67 95       	ror	r22
    2360:	b3 95       	inc	r27
    2362:	d9 f7       	brne	.-10     	; 0x235a <__fixunssfsi+0x42>
    2364:	3e f4       	brtc	.+14     	; 0x2374 <__fixunssfsi+0x5c>
    2366:	90 95       	com	r25
    2368:	80 95       	com	r24
    236a:	70 95       	com	r23
    236c:	61 95       	neg	r22
    236e:	7f 4f       	sbci	r23, 0xFF	; 255
    2370:	8f 4f       	sbci	r24, 0xFF	; 255
    2372:	9f 4f       	sbci	r25, 0xFF	; 255
    2374:	08 95       	ret

00002376 <__floatunsisf>:
    2376:	e8 94       	clt
    2378:	09 c0       	rjmp	.+18     	; 0x238c <__floatsisf+0x12>

0000237a <__floatsisf>:
    237a:	97 fb       	bst	r25, 7
    237c:	3e f4       	brtc	.+14     	; 0x238c <__floatsisf+0x12>
    237e:	90 95       	com	r25
    2380:	80 95       	com	r24
    2382:	70 95       	com	r23
    2384:	61 95       	neg	r22
    2386:	7f 4f       	sbci	r23, 0xFF	; 255
    2388:	8f 4f       	sbci	r24, 0xFF	; 255
    238a:	9f 4f       	sbci	r25, 0xFF	; 255
    238c:	99 23       	and	r25, r25
    238e:	a9 f0       	breq	.+42     	; 0x23ba <__floatsisf+0x40>
    2390:	f9 2f       	mov	r31, r25
    2392:	96 e9       	ldi	r25, 0x96	; 150
    2394:	bb 27       	eor	r27, r27
    2396:	93 95       	inc	r25
    2398:	f6 95       	lsr	r31
    239a:	87 95       	ror	r24
    239c:	77 95       	ror	r23
    239e:	67 95       	ror	r22
    23a0:	b7 95       	ror	r27
    23a2:	f1 11       	cpse	r31, r1
    23a4:	f8 cf       	rjmp	.-16     	; 0x2396 <__floatsisf+0x1c>
    23a6:	fa f4       	brpl	.+62     	; 0x23e6 <__floatsisf+0x6c>
    23a8:	bb 0f       	add	r27, r27
    23aa:	11 f4       	brne	.+4      	; 0x23b0 <__floatsisf+0x36>
    23ac:	60 ff       	sbrs	r22, 0
    23ae:	1b c0       	rjmp	.+54     	; 0x23e6 <__floatsisf+0x6c>
    23b0:	6f 5f       	subi	r22, 0xFF	; 255
    23b2:	7f 4f       	sbci	r23, 0xFF	; 255
    23b4:	8f 4f       	sbci	r24, 0xFF	; 255
    23b6:	9f 4f       	sbci	r25, 0xFF	; 255
    23b8:	16 c0       	rjmp	.+44     	; 0x23e6 <__floatsisf+0x6c>
    23ba:	88 23       	and	r24, r24
    23bc:	11 f0       	breq	.+4      	; 0x23c2 <__floatsisf+0x48>
    23be:	96 e9       	ldi	r25, 0x96	; 150
    23c0:	11 c0       	rjmp	.+34     	; 0x23e4 <__floatsisf+0x6a>
    23c2:	77 23       	and	r23, r23
    23c4:	21 f0       	breq	.+8      	; 0x23ce <__floatsisf+0x54>
    23c6:	9e e8       	ldi	r25, 0x8E	; 142
    23c8:	87 2f       	mov	r24, r23
    23ca:	76 2f       	mov	r23, r22
    23cc:	05 c0       	rjmp	.+10     	; 0x23d8 <__floatsisf+0x5e>
    23ce:	66 23       	and	r22, r22
    23d0:	71 f0       	breq	.+28     	; 0x23ee <__floatsisf+0x74>
    23d2:	96 e8       	ldi	r25, 0x86	; 134
    23d4:	86 2f       	mov	r24, r22
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	2a f0       	brmi	.+10     	; 0x23e6 <__floatsisf+0x6c>
    23dc:	9a 95       	dec	r25
    23de:	66 0f       	add	r22, r22
    23e0:	77 1f       	adc	r23, r23
    23e2:	88 1f       	adc	r24, r24
    23e4:	da f7       	brpl	.-10     	; 0x23dc <__floatsisf+0x62>
    23e6:	88 0f       	add	r24, r24
    23e8:	96 95       	lsr	r25
    23ea:	87 95       	ror	r24
    23ec:	97 f9       	bld	r25, 7
    23ee:	08 95       	ret

000023f0 <__fp_cmp>:
    23f0:	99 0f       	add	r25, r25
    23f2:	00 08       	sbc	r0, r0
    23f4:	55 0f       	add	r21, r21
    23f6:	aa 0b       	sbc	r26, r26
    23f8:	e0 e8       	ldi	r30, 0x80	; 128
    23fa:	fe ef       	ldi	r31, 0xFE	; 254
    23fc:	16 16       	cp	r1, r22
    23fe:	17 06       	cpc	r1, r23
    2400:	e8 07       	cpc	r30, r24
    2402:	f9 07       	cpc	r31, r25
    2404:	c0 f0       	brcs	.+48     	; 0x2436 <__fp_cmp+0x46>
    2406:	12 16       	cp	r1, r18
    2408:	13 06       	cpc	r1, r19
    240a:	e4 07       	cpc	r30, r20
    240c:	f5 07       	cpc	r31, r21
    240e:	98 f0       	brcs	.+38     	; 0x2436 <__fp_cmp+0x46>
    2410:	62 1b       	sub	r22, r18
    2412:	73 0b       	sbc	r23, r19
    2414:	84 0b       	sbc	r24, r20
    2416:	95 0b       	sbc	r25, r21
    2418:	39 f4       	brne	.+14     	; 0x2428 <__fp_cmp+0x38>
    241a:	0a 26       	eor	r0, r26
    241c:	61 f0       	breq	.+24     	; 0x2436 <__fp_cmp+0x46>
    241e:	23 2b       	or	r18, r19
    2420:	24 2b       	or	r18, r20
    2422:	25 2b       	or	r18, r21
    2424:	21 f4       	brne	.+8      	; 0x242e <__fp_cmp+0x3e>
    2426:	08 95       	ret
    2428:	0a 26       	eor	r0, r26
    242a:	09 f4       	brne	.+2      	; 0x242e <__fp_cmp+0x3e>
    242c:	a1 40       	sbci	r26, 0x01	; 1
    242e:	a6 95       	lsr	r26
    2430:	8f ef       	ldi	r24, 0xFF	; 255
    2432:	81 1d       	adc	r24, r1
    2434:	81 1d       	adc	r24, r1
    2436:	08 95       	ret

00002438 <__fp_inf>:
    2438:	97 f9       	bld	r25, 7
    243a:	9f 67       	ori	r25, 0x7F	; 127
    243c:	80 e8       	ldi	r24, 0x80	; 128
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	08 95       	ret

00002444 <__fp_nan>:
    2444:	9f ef       	ldi	r25, 0xFF	; 255
    2446:	80 ec       	ldi	r24, 0xC0	; 192
    2448:	08 95       	ret

0000244a <__fp_pscA>:
    244a:	00 24       	eor	r0, r0
    244c:	0a 94       	dec	r0
    244e:	16 16       	cp	r1, r22
    2450:	17 06       	cpc	r1, r23
    2452:	18 06       	cpc	r1, r24
    2454:	09 06       	cpc	r0, r25
    2456:	08 95       	ret

00002458 <__fp_pscB>:
    2458:	00 24       	eor	r0, r0
    245a:	0a 94       	dec	r0
    245c:	12 16       	cp	r1, r18
    245e:	13 06       	cpc	r1, r19
    2460:	14 06       	cpc	r1, r20
    2462:	05 06       	cpc	r0, r21
    2464:	08 95       	ret

00002466 <__fp_round>:
    2466:	09 2e       	mov	r0, r25
    2468:	03 94       	inc	r0
    246a:	00 0c       	add	r0, r0
    246c:	11 f4       	brne	.+4      	; 0x2472 <__fp_round+0xc>
    246e:	88 23       	and	r24, r24
    2470:	52 f0       	brmi	.+20     	; 0x2486 <__fp_round+0x20>
    2472:	bb 0f       	add	r27, r27
    2474:	40 f4       	brcc	.+16     	; 0x2486 <__fp_round+0x20>
    2476:	bf 2b       	or	r27, r31
    2478:	11 f4       	brne	.+4      	; 0x247e <__fp_round+0x18>
    247a:	60 ff       	sbrs	r22, 0
    247c:	04 c0       	rjmp	.+8      	; 0x2486 <__fp_round+0x20>
    247e:	6f 5f       	subi	r22, 0xFF	; 255
    2480:	7f 4f       	sbci	r23, 0xFF	; 255
    2482:	8f 4f       	sbci	r24, 0xFF	; 255
    2484:	9f 4f       	sbci	r25, 0xFF	; 255
    2486:	08 95       	ret

00002488 <__fp_split3>:
    2488:	57 fd       	sbrc	r21, 7
    248a:	90 58       	subi	r25, 0x80	; 128
    248c:	44 0f       	add	r20, r20
    248e:	55 1f       	adc	r21, r21
    2490:	59 f0       	breq	.+22     	; 0x24a8 <__fp_splitA+0x10>
    2492:	5f 3f       	cpi	r21, 0xFF	; 255
    2494:	71 f0       	breq	.+28     	; 0x24b2 <__fp_splitA+0x1a>
    2496:	47 95       	ror	r20

00002498 <__fp_splitA>:
    2498:	88 0f       	add	r24, r24
    249a:	97 fb       	bst	r25, 7
    249c:	99 1f       	adc	r25, r25
    249e:	61 f0       	breq	.+24     	; 0x24b8 <__fp_splitA+0x20>
    24a0:	9f 3f       	cpi	r25, 0xFF	; 255
    24a2:	79 f0       	breq	.+30     	; 0x24c2 <__fp_splitA+0x2a>
    24a4:	87 95       	ror	r24
    24a6:	08 95       	ret
    24a8:	12 16       	cp	r1, r18
    24aa:	13 06       	cpc	r1, r19
    24ac:	14 06       	cpc	r1, r20
    24ae:	55 1f       	adc	r21, r21
    24b0:	f2 cf       	rjmp	.-28     	; 0x2496 <__fp_split3+0xe>
    24b2:	46 95       	lsr	r20
    24b4:	f1 df       	rcall	.-30     	; 0x2498 <__fp_splitA>
    24b6:	08 c0       	rjmp	.+16     	; 0x24c8 <__fp_splitA+0x30>
    24b8:	16 16       	cp	r1, r22
    24ba:	17 06       	cpc	r1, r23
    24bc:	18 06       	cpc	r1, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	f1 cf       	rjmp	.-30     	; 0x24a4 <__fp_splitA+0xc>
    24c2:	86 95       	lsr	r24
    24c4:	71 05       	cpc	r23, r1
    24c6:	61 05       	cpc	r22, r1
    24c8:	08 94       	sec
    24ca:	08 95       	ret

000024cc <__fp_zero>:
    24cc:	e8 94       	clt

000024ce <__fp_szero>:
    24ce:	bb 27       	eor	r27, r27
    24d0:	66 27       	eor	r22, r22
    24d2:	77 27       	eor	r23, r23
    24d4:	cb 01       	movw	r24, r22
    24d6:	97 f9       	bld	r25, 7
    24d8:	08 95       	ret

000024da <__gesf2>:
    24da:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__fp_cmp>
    24de:	08 f4       	brcc	.+2      	; 0x24e2 <__gesf2+0x8>
    24e0:	8f ef       	ldi	r24, 0xFF	; 255
    24e2:	08 95       	ret

000024e4 <__mulsf3>:
    24e4:	0e 94 85 12 	call	0x250a	; 0x250a <__mulsf3x>
    24e8:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__fp_round>
    24ec:	0e 94 25 12 	call	0x244a	; 0x244a <__fp_pscA>
    24f0:	38 f0       	brcs	.+14     	; 0x2500 <__mulsf3+0x1c>
    24f2:	0e 94 2c 12 	call	0x2458	; 0x2458 <__fp_pscB>
    24f6:	20 f0       	brcs	.+8      	; 0x2500 <__mulsf3+0x1c>
    24f8:	95 23       	and	r25, r21
    24fa:	11 f0       	breq	.+4      	; 0x2500 <__mulsf3+0x1c>
    24fc:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__fp_inf>
    2500:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__fp_nan>
    2504:	11 24       	eor	r1, r1
    2506:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_szero>

0000250a <__mulsf3x>:
    250a:	0e 94 44 12 	call	0x2488	; 0x2488 <__fp_split3>
    250e:	70 f3       	brcs	.-36     	; 0x24ec <__mulsf3+0x8>

00002510 <__mulsf3_pse>:
    2510:	95 9f       	mul	r25, r21
    2512:	c1 f3       	breq	.-16     	; 0x2504 <__mulsf3+0x20>
    2514:	95 0f       	add	r25, r21
    2516:	50 e0       	ldi	r21, 0x00	; 0
    2518:	55 1f       	adc	r21, r21
    251a:	62 9f       	mul	r22, r18
    251c:	f0 01       	movw	r30, r0
    251e:	72 9f       	mul	r23, r18
    2520:	bb 27       	eor	r27, r27
    2522:	f0 0d       	add	r31, r0
    2524:	b1 1d       	adc	r27, r1
    2526:	63 9f       	mul	r22, r19
    2528:	aa 27       	eor	r26, r26
    252a:	f0 0d       	add	r31, r0
    252c:	b1 1d       	adc	r27, r1
    252e:	aa 1f       	adc	r26, r26
    2530:	64 9f       	mul	r22, r20
    2532:	66 27       	eor	r22, r22
    2534:	b0 0d       	add	r27, r0
    2536:	a1 1d       	adc	r26, r1
    2538:	66 1f       	adc	r22, r22
    253a:	82 9f       	mul	r24, r18
    253c:	22 27       	eor	r18, r18
    253e:	b0 0d       	add	r27, r0
    2540:	a1 1d       	adc	r26, r1
    2542:	62 1f       	adc	r22, r18
    2544:	73 9f       	mul	r23, r19
    2546:	b0 0d       	add	r27, r0
    2548:	a1 1d       	adc	r26, r1
    254a:	62 1f       	adc	r22, r18
    254c:	83 9f       	mul	r24, r19
    254e:	a0 0d       	add	r26, r0
    2550:	61 1d       	adc	r22, r1
    2552:	22 1f       	adc	r18, r18
    2554:	74 9f       	mul	r23, r20
    2556:	33 27       	eor	r19, r19
    2558:	a0 0d       	add	r26, r0
    255a:	61 1d       	adc	r22, r1
    255c:	23 1f       	adc	r18, r19
    255e:	84 9f       	mul	r24, r20
    2560:	60 0d       	add	r22, r0
    2562:	21 1d       	adc	r18, r1
    2564:	82 2f       	mov	r24, r18
    2566:	76 2f       	mov	r23, r22
    2568:	6a 2f       	mov	r22, r26
    256a:	11 24       	eor	r1, r1
    256c:	9f 57       	subi	r25, 0x7F	; 127
    256e:	50 40       	sbci	r21, 0x00	; 0
    2570:	9a f0       	brmi	.+38     	; 0x2598 <__mulsf3_pse+0x88>
    2572:	f1 f0       	breq	.+60     	; 0x25b0 <__mulsf3_pse+0xa0>
    2574:	88 23       	and	r24, r24
    2576:	4a f0       	brmi	.+18     	; 0x258a <__mulsf3_pse+0x7a>
    2578:	ee 0f       	add	r30, r30
    257a:	ff 1f       	adc	r31, r31
    257c:	bb 1f       	adc	r27, r27
    257e:	66 1f       	adc	r22, r22
    2580:	77 1f       	adc	r23, r23
    2582:	88 1f       	adc	r24, r24
    2584:	91 50       	subi	r25, 0x01	; 1
    2586:	50 40       	sbci	r21, 0x00	; 0
    2588:	a9 f7       	brne	.-22     	; 0x2574 <__mulsf3_pse+0x64>
    258a:	9e 3f       	cpi	r25, 0xFE	; 254
    258c:	51 05       	cpc	r21, r1
    258e:	80 f0       	brcs	.+32     	; 0x25b0 <__mulsf3_pse+0xa0>
    2590:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__fp_inf>
    2594:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__fp_szero>
    2598:	5f 3f       	cpi	r21, 0xFF	; 255
    259a:	e4 f3       	brlt	.-8      	; 0x2594 <__mulsf3_pse+0x84>
    259c:	98 3e       	cpi	r25, 0xE8	; 232
    259e:	d4 f3       	brlt	.-12     	; 0x2594 <__mulsf3_pse+0x84>
    25a0:	86 95       	lsr	r24
    25a2:	77 95       	ror	r23
    25a4:	67 95       	ror	r22
    25a6:	b7 95       	ror	r27
    25a8:	f7 95       	ror	r31
    25aa:	e7 95       	ror	r30
    25ac:	9f 5f       	subi	r25, 0xFF	; 255
    25ae:	c1 f7       	brne	.-16     	; 0x25a0 <__mulsf3_pse+0x90>
    25b0:	fe 2b       	or	r31, r30
    25b2:	88 0f       	add	r24, r24
    25b4:	91 1d       	adc	r25, r1
    25b6:	96 95       	lsr	r25
    25b8:	87 95       	ror	r24
    25ba:	97 f9       	bld	r25, 7
    25bc:	08 95       	ret

000025be <dtostrf>:
    25be:	ef 92       	push	r14
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	e8 01       	movw	r28, r16
    25ca:	47 fd       	sbrc	r20, 7
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <dtostrf+0x14>
    25ce:	34 e0       	ldi	r19, 0x04	; 4
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <dtostrf+0x16>
    25d2:	34 e1       	ldi	r19, 0x14	; 20
    25d4:	04 2e       	mov	r0, r20
    25d6:	00 0c       	add	r0, r0
    25d8:	55 0b       	sbc	r21, r21
    25da:	57 ff       	sbrs	r21, 7
    25dc:	03 c0       	rjmp	.+6      	; 0x25e4 <dtostrf+0x26>
    25de:	51 95       	neg	r21
    25e0:	41 95       	neg	r20
    25e2:	51 09       	sbc	r21, r1
    25e4:	e3 2e       	mov	r14, r19
    25e6:	02 2f       	mov	r16, r18
    25e8:	24 2f       	mov	r18, r20
    25ea:	ae 01       	movw	r20, r28
    25ec:	0e 94 ff 12 	call	0x25fe	; 0x25fe <dtoa_prf>
    25f0:	ce 01       	movw	r24, r28
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	ef 90       	pop	r14
    25fc:	08 95       	ret

000025fe <dtoa_prf>:
    25fe:	a9 e0       	ldi	r26, 0x09	; 9
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e5 e0       	ldi	r30, 0x05	; 5
    2604:	f3 e1       	ldi	r31, 0x13	; 19
    2606:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <__prologue_saves__+0xc>
    260a:	6a 01       	movw	r12, r20
    260c:	12 2f       	mov	r17, r18
    260e:	b0 2e       	mov	r11, r16
    2610:	2b e3       	ldi	r18, 0x3B	; 59
    2612:	20 17       	cp	r18, r16
    2614:	20 f0       	brcs	.+8      	; 0x261e <dtoa_prf+0x20>
    2616:	ff 24       	eor	r15, r15
    2618:	f3 94       	inc	r15
    261a:	f0 0e       	add	r15, r16
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <dtoa_prf+0x24>
    261e:	2c e3       	ldi	r18, 0x3C	; 60
    2620:	f2 2e       	mov	r15, r18
    2622:	0f 2d       	mov	r16, r15
    2624:	27 e0       	ldi	r18, 0x07	; 7
    2626:	ae 01       	movw	r20, r28
    2628:	4f 5f       	subi	r20, 0xFF	; 255
    262a:	5f 4f       	sbci	r21, 0xFF	; 255
    262c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <__ftoa_engine>
    2630:	bc 01       	movw	r22, r24
    2632:	49 81       	ldd	r20, Y+1	; 0x01
    2634:	84 2f       	mov	r24, r20
    2636:	89 70       	andi	r24, 0x09	; 9
    2638:	81 30       	cpi	r24, 0x01	; 1
    263a:	31 f0       	breq	.+12     	; 0x2648 <dtoa_prf+0x4a>
    263c:	e1 fc       	sbrc	r14, 1
    263e:	06 c0       	rjmp	.+12     	; 0x264c <dtoa_prf+0x4e>
    2640:	e0 fe       	sbrs	r14, 0
    2642:	06 c0       	rjmp	.+12     	; 0x2650 <dtoa_prf+0x52>
    2644:	90 e2       	ldi	r25, 0x20	; 32
    2646:	05 c0       	rjmp	.+10     	; 0x2652 <dtoa_prf+0x54>
    2648:	9d e2       	ldi	r25, 0x2D	; 45
    264a:	03 c0       	rjmp	.+6      	; 0x2652 <dtoa_prf+0x54>
    264c:	9b e2       	ldi	r25, 0x2B	; 43
    264e:	01 c0       	rjmp	.+2      	; 0x2652 <dtoa_prf+0x54>
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	5e 2d       	mov	r21, r14
    2654:	50 71       	andi	r21, 0x10	; 16
    2656:	43 ff       	sbrs	r20, 3
    2658:	3c c0       	rjmp	.+120    	; 0x26d2 <dtoa_prf+0xd4>
    265a:	91 11       	cpse	r25, r1
    265c:	02 c0       	rjmp	.+4      	; 0x2662 <dtoa_prf+0x64>
    265e:	83 e0       	ldi	r24, 0x03	; 3
    2660:	01 c0       	rjmp	.+2      	; 0x2664 <dtoa_prf+0x66>
    2662:	84 e0       	ldi	r24, 0x04	; 4
    2664:	81 17       	cp	r24, r17
    2666:	18 f4       	brcc	.+6      	; 0x266e <dtoa_prf+0x70>
    2668:	21 2f       	mov	r18, r17
    266a:	28 1b       	sub	r18, r24
    266c:	01 c0       	rjmp	.+2      	; 0x2670 <dtoa_prf+0x72>
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	51 11       	cpse	r21, r1
    2672:	0b c0       	rjmp	.+22     	; 0x268a <dtoa_prf+0x8c>
    2674:	f6 01       	movw	r30, r12
    2676:	82 2f       	mov	r24, r18
    2678:	30 e2       	ldi	r19, 0x20	; 32
    267a:	88 23       	and	r24, r24
    267c:	19 f0       	breq	.+6      	; 0x2684 <dtoa_prf+0x86>
    267e:	31 93       	st	Z+, r19
    2680:	81 50       	subi	r24, 0x01	; 1
    2682:	fb cf       	rjmp	.-10     	; 0x267a <dtoa_prf+0x7c>
    2684:	c2 0e       	add	r12, r18
    2686:	d1 1c       	adc	r13, r1
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	99 23       	and	r25, r25
    268c:	29 f0       	breq	.+10     	; 0x2698 <dtoa_prf+0x9a>
    268e:	d6 01       	movw	r26, r12
    2690:	9c 93       	st	X, r25
    2692:	f6 01       	movw	r30, r12
    2694:	31 96       	adiw	r30, 0x01	; 1
    2696:	6f 01       	movw	r12, r30
    2698:	c6 01       	movw	r24, r12
    269a:	03 96       	adiw	r24, 0x03	; 3
    269c:	e2 fe       	sbrs	r14, 2
    269e:	0a c0       	rjmp	.+20     	; 0x26b4 <dtoa_prf+0xb6>
    26a0:	3e e4       	ldi	r19, 0x4E	; 78
    26a2:	d6 01       	movw	r26, r12
    26a4:	3c 93       	st	X, r19
    26a6:	41 e4       	ldi	r20, 0x41	; 65
    26a8:	11 96       	adiw	r26, 0x01	; 1
    26aa:	4c 93       	st	X, r20
    26ac:	11 97       	sbiw	r26, 0x01	; 1
    26ae:	12 96       	adiw	r26, 0x02	; 2
    26b0:	3c 93       	st	X, r19
    26b2:	06 c0       	rjmp	.+12     	; 0x26c0 <dtoa_prf+0xc2>
    26b4:	3e e6       	ldi	r19, 0x6E	; 110
    26b6:	f6 01       	movw	r30, r12
    26b8:	30 83       	st	Z, r19
    26ba:	41 e6       	ldi	r20, 0x61	; 97
    26bc:	41 83       	std	Z+1, r20	; 0x01
    26be:	32 83       	std	Z+2, r19	; 0x02
    26c0:	fc 01       	movw	r30, r24
    26c2:	32 2f       	mov	r19, r18
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	33 23       	and	r19, r19
    26c8:	09 f4       	brne	.+2      	; 0x26cc <dtoa_prf+0xce>
    26ca:	42 c0       	rjmp	.+132    	; 0x2750 <dtoa_prf+0x152>
    26cc:	41 93       	st	Z+, r20
    26ce:	31 50       	subi	r19, 0x01	; 1
    26d0:	fa cf       	rjmp	.-12     	; 0x26c6 <dtoa_prf+0xc8>
    26d2:	42 ff       	sbrs	r20, 2
    26d4:	44 c0       	rjmp	.+136    	; 0x275e <dtoa_prf+0x160>
    26d6:	91 11       	cpse	r25, r1
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <dtoa_prf+0xe0>
    26da:	83 e0       	ldi	r24, 0x03	; 3
    26dc:	01 c0       	rjmp	.+2      	; 0x26e0 <dtoa_prf+0xe2>
    26de:	84 e0       	ldi	r24, 0x04	; 4
    26e0:	81 17       	cp	r24, r17
    26e2:	18 f4       	brcc	.+6      	; 0x26ea <dtoa_prf+0xec>
    26e4:	21 2f       	mov	r18, r17
    26e6:	28 1b       	sub	r18, r24
    26e8:	01 c0       	rjmp	.+2      	; 0x26ec <dtoa_prf+0xee>
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	51 11       	cpse	r21, r1
    26ee:	0b c0       	rjmp	.+22     	; 0x2706 <dtoa_prf+0x108>
    26f0:	f6 01       	movw	r30, r12
    26f2:	82 2f       	mov	r24, r18
    26f4:	30 e2       	ldi	r19, 0x20	; 32
    26f6:	88 23       	and	r24, r24
    26f8:	19 f0       	breq	.+6      	; 0x2700 <dtoa_prf+0x102>
    26fa:	31 93       	st	Z+, r19
    26fc:	81 50       	subi	r24, 0x01	; 1
    26fe:	fb cf       	rjmp	.-10     	; 0x26f6 <dtoa_prf+0xf8>
    2700:	c2 0e       	add	r12, r18
    2702:	d1 1c       	adc	r13, r1
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	99 23       	and	r25, r25
    2708:	29 f0       	breq	.+10     	; 0x2714 <dtoa_prf+0x116>
    270a:	d6 01       	movw	r26, r12
    270c:	9c 93       	st	X, r25
    270e:	f6 01       	movw	r30, r12
    2710:	31 96       	adiw	r30, 0x01	; 1
    2712:	6f 01       	movw	r12, r30
    2714:	c6 01       	movw	r24, r12
    2716:	03 96       	adiw	r24, 0x03	; 3
    2718:	e2 fe       	sbrs	r14, 2
    271a:	0b c0       	rjmp	.+22     	; 0x2732 <dtoa_prf+0x134>
    271c:	39 e4       	ldi	r19, 0x49	; 73
    271e:	d6 01       	movw	r26, r12
    2720:	3c 93       	st	X, r19
    2722:	3e e4       	ldi	r19, 0x4E	; 78
    2724:	11 96       	adiw	r26, 0x01	; 1
    2726:	3c 93       	st	X, r19
    2728:	11 97       	sbiw	r26, 0x01	; 1
    272a:	36 e4       	ldi	r19, 0x46	; 70
    272c:	12 96       	adiw	r26, 0x02	; 2
    272e:	3c 93       	st	X, r19
    2730:	07 c0       	rjmp	.+14     	; 0x2740 <dtoa_prf+0x142>
    2732:	39 e6       	ldi	r19, 0x69	; 105
    2734:	f6 01       	movw	r30, r12
    2736:	30 83       	st	Z, r19
    2738:	3e e6       	ldi	r19, 0x6E	; 110
    273a:	31 83       	std	Z+1, r19	; 0x01
    273c:	36 e6       	ldi	r19, 0x66	; 102
    273e:	32 83       	std	Z+2, r19	; 0x02
    2740:	fc 01       	movw	r30, r24
    2742:	32 2f       	mov	r19, r18
    2744:	40 e2       	ldi	r20, 0x20	; 32
    2746:	33 23       	and	r19, r19
    2748:	19 f0       	breq	.+6      	; 0x2750 <dtoa_prf+0x152>
    274a:	41 93       	st	Z+, r20
    274c:	31 50       	subi	r19, 0x01	; 1
    274e:	fb cf       	rjmp	.-10     	; 0x2746 <dtoa_prf+0x148>
    2750:	fc 01       	movw	r30, r24
    2752:	e2 0f       	add	r30, r18
    2754:	f1 1d       	adc	r31, r1
    2756:	10 82       	st	Z, r1
    2758:	8e ef       	ldi	r24, 0xFE	; 254
    275a:	9f ef       	ldi	r25, 0xFF	; 255
    275c:	a6 c0       	rjmp	.+332    	; 0x28aa <dtoa_prf+0x2ac>
    275e:	21 e0       	ldi	r18, 0x01	; 1
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	91 11       	cpse	r25, r1
    2764:	02 c0       	rjmp	.+4      	; 0x276a <dtoa_prf+0x16c>
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	16 16       	cp	r1, r22
    276c:	17 06       	cpc	r1, r23
    276e:	1c f4       	brge	.+6      	; 0x2776 <dtoa_prf+0x178>
    2770:	fb 01       	movw	r30, r22
    2772:	31 96       	adiw	r30, 0x01	; 1
    2774:	02 c0       	rjmp	.+4      	; 0x277a <dtoa_prf+0x17c>
    2776:	e1 e0       	ldi	r30, 0x01	; 1
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	2e 0f       	add	r18, r30
    277c:	3f 1f       	adc	r19, r31
    277e:	bb 20       	and	r11, r11
    2780:	21 f0       	breq	.+8      	; 0x278a <dtoa_prf+0x18c>
    2782:	eb 2d       	mov	r30, r11
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	31 96       	adiw	r30, 0x01	; 1
    2788:	02 c0       	rjmp	.+4      	; 0x278e <dtoa_prf+0x190>
    278a:	e0 e0       	ldi	r30, 0x00	; 0
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	2e 0f       	add	r18, r30
    2790:	3f 1f       	adc	r19, r31
    2792:	e1 2f       	mov	r30, r17
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	2e 17       	cp	r18, r30
    2798:	3f 07       	cpc	r19, r31
    279a:	1c f4       	brge	.+6      	; 0x27a2 <dtoa_prf+0x1a4>
    279c:	12 1b       	sub	r17, r18
    279e:	21 2f       	mov	r18, r17
    27a0:	01 c0       	rjmp	.+2      	; 0x27a4 <dtoa_prf+0x1a6>
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	8e 2d       	mov	r24, r14
    27a6:	88 71       	andi	r24, 0x18	; 24
    27a8:	59 f4       	brne	.+22     	; 0x27c0 <dtoa_prf+0x1c2>
    27aa:	f6 01       	movw	r30, r12
    27ac:	82 2f       	mov	r24, r18
    27ae:	30 e2       	ldi	r19, 0x20	; 32
    27b0:	88 23       	and	r24, r24
    27b2:	19 f0       	breq	.+6      	; 0x27ba <dtoa_prf+0x1bc>
    27b4:	31 93       	st	Z+, r19
    27b6:	81 50       	subi	r24, 0x01	; 1
    27b8:	fb cf       	rjmp	.-10     	; 0x27b0 <dtoa_prf+0x1b2>
    27ba:	c2 0e       	add	r12, r18
    27bc:	d1 1c       	adc	r13, r1
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	99 23       	and	r25, r25
    27c2:	29 f0       	breq	.+10     	; 0x27ce <dtoa_prf+0x1d0>
    27c4:	d6 01       	movw	r26, r12
    27c6:	9c 93       	st	X, r25
    27c8:	f6 01       	movw	r30, r12
    27ca:	31 96       	adiw	r30, 0x01	; 1
    27cc:	6f 01       	movw	r12, r30
    27ce:	51 11       	cpse	r21, r1
    27d0:	0b c0       	rjmp	.+22     	; 0x27e8 <dtoa_prf+0x1ea>
    27d2:	f6 01       	movw	r30, r12
    27d4:	82 2f       	mov	r24, r18
    27d6:	90 e3       	ldi	r25, 0x30	; 48
    27d8:	88 23       	and	r24, r24
    27da:	19 f0       	breq	.+6      	; 0x27e2 <dtoa_prf+0x1e4>
    27dc:	91 93       	st	Z+, r25
    27de:	81 50       	subi	r24, 0x01	; 1
    27e0:	fb cf       	rjmp	.-10     	; 0x27d8 <dtoa_prf+0x1da>
    27e2:	c2 0e       	add	r12, r18
    27e4:	d1 1c       	adc	r13, r1
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	0f 2d       	mov	r16, r15
    27ea:	06 0f       	add	r16, r22
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	34 2f       	mov	r19, r20
    27f0:	30 71       	andi	r19, 0x10	; 16
    27f2:	44 ff       	sbrs	r20, 4
    27f4:	03 c0       	rjmp	.+6      	; 0x27fc <dtoa_prf+0x1fe>
    27f6:	91 33       	cpi	r25, 0x31	; 49
    27f8:	09 f4       	brne	.+2      	; 0x27fc <dtoa_prf+0x1fe>
    27fa:	01 50       	subi	r16, 0x01	; 1
    27fc:	10 16       	cp	r1, r16
    27fe:	24 f4       	brge	.+8      	; 0x2808 <dtoa_prf+0x20a>
    2800:	09 30       	cpi	r16, 0x09	; 9
    2802:	18 f0       	brcs	.+6      	; 0x280a <dtoa_prf+0x20c>
    2804:	08 e0       	ldi	r16, 0x08	; 8
    2806:	01 c0       	rjmp	.+2      	; 0x280a <dtoa_prf+0x20c>
    2808:	01 e0       	ldi	r16, 0x01	; 1
    280a:	ab 01       	movw	r20, r22
    280c:	77 ff       	sbrs	r23, 7
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <dtoa_prf+0x216>
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	fb 01       	movw	r30, r22
    2816:	e4 1b       	sub	r30, r20
    2818:	f5 0b       	sbc	r31, r21
    281a:	a1 e0       	ldi	r26, 0x01	; 1
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	ac 0f       	add	r26, r28
    2820:	bd 1f       	adc	r27, r29
    2822:	ea 0f       	add	r30, r26
    2824:	fb 1f       	adc	r31, r27
    2826:	8e e2       	ldi	r24, 0x2E	; 46
    2828:	a8 2e       	mov	r10, r24
    282a:	4b 01       	movw	r8, r22
    282c:	80 1a       	sub	r8, r16
    282e:	91 08       	sbc	r9, r1
    2830:	0b 2d       	mov	r16, r11
    2832:	10 e0       	ldi	r17, 0x00	; 0
    2834:	11 95       	neg	r17
    2836:	01 95       	neg	r16
    2838:	11 09       	sbc	r17, r1
    283a:	4f 3f       	cpi	r20, 0xFF	; 255
    283c:	bf ef       	ldi	r27, 0xFF	; 255
    283e:	5b 07       	cpc	r21, r27
    2840:	21 f4       	brne	.+8      	; 0x284a <dtoa_prf+0x24c>
    2842:	d6 01       	movw	r26, r12
    2844:	ac 92       	st	X, r10
    2846:	11 96       	adiw	r26, 0x01	; 1
    2848:	6d 01       	movw	r12, r26
    284a:	64 17       	cp	r22, r20
    284c:	75 07       	cpc	r23, r21
    284e:	2c f0       	brlt	.+10     	; 0x285a <dtoa_prf+0x25c>
    2850:	84 16       	cp	r8, r20
    2852:	95 06       	cpc	r9, r21
    2854:	14 f4       	brge	.+4      	; 0x285a <dtoa_prf+0x25c>
    2856:	81 81       	ldd	r24, Z+1	; 0x01
    2858:	01 c0       	rjmp	.+2      	; 0x285c <dtoa_prf+0x25e>
    285a:	80 e3       	ldi	r24, 0x30	; 48
    285c:	41 50       	subi	r20, 0x01	; 1
    285e:	51 09       	sbc	r21, r1
    2860:	31 96       	adiw	r30, 0x01	; 1
    2862:	d6 01       	movw	r26, r12
    2864:	11 96       	adiw	r26, 0x01	; 1
    2866:	7d 01       	movw	r14, r26
    2868:	40 17       	cp	r20, r16
    286a:	51 07       	cpc	r21, r17
    286c:	24 f0       	brlt	.+8      	; 0x2876 <dtoa_prf+0x278>
    286e:	d6 01       	movw	r26, r12
    2870:	8c 93       	st	X, r24
    2872:	67 01       	movw	r12, r14
    2874:	e2 cf       	rjmp	.-60     	; 0x283a <dtoa_prf+0x23c>
    2876:	64 17       	cp	r22, r20
    2878:	75 07       	cpc	r23, r21
    287a:	39 f4       	brne	.+14     	; 0x288a <dtoa_prf+0x28c>
    287c:	96 33       	cpi	r25, 0x36	; 54
    287e:	20 f4       	brcc	.+8      	; 0x2888 <dtoa_prf+0x28a>
    2880:	95 33       	cpi	r25, 0x35	; 53
    2882:	19 f4       	brne	.+6      	; 0x288a <dtoa_prf+0x28c>
    2884:	31 11       	cpse	r19, r1
    2886:	01 c0       	rjmp	.+2      	; 0x288a <dtoa_prf+0x28c>
    2888:	81 e3       	ldi	r24, 0x31	; 49
    288a:	f6 01       	movw	r30, r12
    288c:	80 83       	st	Z, r24
    288e:	f7 01       	movw	r30, r14
    2890:	82 2f       	mov	r24, r18
    2892:	90 e2       	ldi	r25, 0x20	; 32
    2894:	88 23       	and	r24, r24
    2896:	19 f0       	breq	.+6      	; 0x289e <dtoa_prf+0x2a0>
    2898:	91 93       	st	Z+, r25
    289a:	81 50       	subi	r24, 0x01	; 1
    289c:	fb cf       	rjmp	.-10     	; 0x2894 <dtoa_prf+0x296>
    289e:	f7 01       	movw	r30, r14
    28a0:	e2 0f       	add	r30, r18
    28a2:	f1 1d       	adc	r31, r1
    28a4:	10 82       	st	Z, r1
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	29 96       	adiw	r28, 0x09	; 9
    28ac:	ec e0       	ldi	r30, 0x0C	; 12
    28ae:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__epilogue_restores__+0xc>

000028b2 <__ftoa_engine>:
    28b2:	28 30       	cpi	r18, 0x08	; 8
    28b4:	08 f0       	brcs	.+2      	; 0x28b8 <__ftoa_engine+0x6>
    28b6:	27 e0       	ldi	r18, 0x07	; 7
    28b8:	33 27       	eor	r19, r19
    28ba:	da 01       	movw	r26, r20
    28bc:	99 0f       	add	r25, r25
    28be:	31 1d       	adc	r19, r1
    28c0:	87 fd       	sbrc	r24, 7
    28c2:	91 60       	ori	r25, 0x01	; 1
    28c4:	00 96       	adiw	r24, 0x00	; 0
    28c6:	61 05       	cpc	r22, r1
    28c8:	71 05       	cpc	r23, r1
    28ca:	39 f4       	brne	.+14     	; 0x28da <__ftoa_engine+0x28>
    28cc:	32 60       	ori	r19, 0x02	; 2
    28ce:	2e 5f       	subi	r18, 0xFE	; 254
    28d0:	3d 93       	st	X+, r19
    28d2:	30 e3       	ldi	r19, 0x30	; 48
    28d4:	2a 95       	dec	r18
    28d6:	e1 f7       	brne	.-8      	; 0x28d0 <__ftoa_engine+0x1e>
    28d8:	08 95       	ret
    28da:	9f 3f       	cpi	r25, 0xFF	; 255
    28dc:	30 f0       	brcs	.+12     	; 0x28ea <__ftoa_engine+0x38>
    28de:	80 38       	cpi	r24, 0x80	; 128
    28e0:	71 05       	cpc	r23, r1
    28e2:	61 05       	cpc	r22, r1
    28e4:	09 f0       	breq	.+2      	; 0x28e8 <__ftoa_engine+0x36>
    28e6:	3c 5f       	subi	r19, 0xFC	; 252
    28e8:	3c 5f       	subi	r19, 0xFC	; 252
    28ea:	3d 93       	st	X+, r19
    28ec:	91 30       	cpi	r25, 0x01	; 1
    28ee:	08 f0       	brcs	.+2      	; 0x28f2 <__ftoa_engine+0x40>
    28f0:	80 68       	ori	r24, 0x80	; 128
    28f2:	91 1d       	adc	r25, r1
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	1f 93       	push	r17
    28fa:	0f 93       	push	r16
    28fc:	ff 92       	push	r15
    28fe:	ef 92       	push	r14
    2900:	19 2f       	mov	r17, r25
    2902:	98 7f       	andi	r25, 0xF8	; 248
    2904:	96 95       	lsr	r25
    2906:	e9 2f       	mov	r30, r25
    2908:	96 95       	lsr	r25
    290a:	96 95       	lsr	r25
    290c:	e9 0f       	add	r30, r25
    290e:	ff 27       	eor	r31, r31
    2910:	ee 53       	subi	r30, 0x3E	; 62
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	99 27       	eor	r25, r25
    2916:	33 27       	eor	r19, r19
    2918:	ee 24       	eor	r14, r14
    291a:	ff 24       	eor	r15, r15
    291c:	a7 01       	movw	r20, r14
    291e:	e7 01       	movw	r28, r14
    2920:	05 90       	lpm	r0, Z+
    2922:	08 94       	sec
    2924:	07 94       	ror	r0
    2926:	28 f4       	brcc	.+10     	; 0x2932 <__ftoa_engine+0x80>
    2928:	36 0f       	add	r19, r22
    292a:	e7 1e       	adc	r14, r23
    292c:	f8 1e       	adc	r15, r24
    292e:	49 1f       	adc	r20, r25
    2930:	51 1d       	adc	r21, r1
    2932:	66 0f       	add	r22, r22
    2934:	77 1f       	adc	r23, r23
    2936:	88 1f       	adc	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	06 94       	lsr	r0
    293c:	a1 f7       	brne	.-24     	; 0x2926 <__ftoa_engine+0x74>
    293e:	05 90       	lpm	r0, Z+
    2940:	07 94       	ror	r0
    2942:	28 f4       	brcc	.+10     	; 0x294e <__ftoa_engine+0x9c>
    2944:	e7 0e       	add	r14, r23
    2946:	f8 1e       	adc	r15, r24
    2948:	49 1f       	adc	r20, r25
    294a:	56 1f       	adc	r21, r22
    294c:	c1 1d       	adc	r28, r1
    294e:	77 0f       	add	r23, r23
    2950:	88 1f       	adc	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	66 1f       	adc	r22, r22
    2956:	06 94       	lsr	r0
    2958:	a1 f7       	brne	.-24     	; 0x2942 <__ftoa_engine+0x90>
    295a:	05 90       	lpm	r0, Z+
    295c:	07 94       	ror	r0
    295e:	28 f4       	brcc	.+10     	; 0x296a <__ftoa_engine+0xb8>
    2960:	f8 0e       	add	r15, r24
    2962:	49 1f       	adc	r20, r25
    2964:	56 1f       	adc	r21, r22
    2966:	c7 1f       	adc	r28, r23
    2968:	d1 1d       	adc	r29, r1
    296a:	88 0f       	add	r24, r24
    296c:	99 1f       	adc	r25, r25
    296e:	66 1f       	adc	r22, r22
    2970:	77 1f       	adc	r23, r23
    2972:	06 94       	lsr	r0
    2974:	a1 f7       	brne	.-24     	; 0x295e <__ftoa_engine+0xac>
    2976:	05 90       	lpm	r0, Z+
    2978:	07 94       	ror	r0
    297a:	20 f4       	brcc	.+8      	; 0x2984 <__ftoa_engine+0xd2>
    297c:	49 0f       	add	r20, r25
    297e:	56 1f       	adc	r21, r22
    2980:	c7 1f       	adc	r28, r23
    2982:	d8 1f       	adc	r29, r24
    2984:	99 0f       	add	r25, r25
    2986:	66 1f       	adc	r22, r22
    2988:	77 1f       	adc	r23, r23
    298a:	88 1f       	adc	r24, r24
    298c:	06 94       	lsr	r0
    298e:	a9 f7       	brne	.-22     	; 0x297a <__ftoa_engine+0xc8>
    2990:	84 91       	lpm	r24, Z
    2992:	10 95       	com	r17
    2994:	17 70       	andi	r17, 0x07	; 7
    2996:	41 f0       	breq	.+16     	; 0x29a8 <__ftoa_engine+0xf6>
    2998:	d6 95       	lsr	r29
    299a:	c7 95       	ror	r28
    299c:	57 95       	ror	r21
    299e:	47 95       	ror	r20
    29a0:	f7 94       	ror	r15
    29a2:	e7 94       	ror	r14
    29a4:	1a 95       	dec	r17
    29a6:	c1 f7       	brne	.-16     	; 0x2998 <__ftoa_engine+0xe6>
    29a8:	e8 e6       	ldi	r30, 0x68	; 104
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	68 94       	set
    29ae:	15 90       	lpm	r1, Z+
    29b0:	15 91       	lpm	r17, Z+
    29b2:	35 91       	lpm	r19, Z+
    29b4:	65 91       	lpm	r22, Z+
    29b6:	95 91       	lpm	r25, Z+
    29b8:	05 90       	lpm	r0, Z+
    29ba:	7f e2       	ldi	r23, 0x2F	; 47
    29bc:	73 95       	inc	r23
    29be:	e1 18       	sub	r14, r1
    29c0:	f1 0a       	sbc	r15, r17
    29c2:	43 0b       	sbc	r20, r19
    29c4:	56 0b       	sbc	r21, r22
    29c6:	c9 0b       	sbc	r28, r25
    29c8:	d0 09       	sbc	r29, r0
    29ca:	c0 f7       	brcc	.-16     	; 0x29bc <__ftoa_engine+0x10a>
    29cc:	e1 0c       	add	r14, r1
    29ce:	f1 1e       	adc	r15, r17
    29d0:	43 1f       	adc	r20, r19
    29d2:	56 1f       	adc	r21, r22
    29d4:	c9 1f       	adc	r28, r25
    29d6:	d0 1d       	adc	r29, r0
    29d8:	7e f4       	brtc	.+30     	; 0x29f8 <__ftoa_engine+0x146>
    29da:	70 33       	cpi	r23, 0x30	; 48
    29dc:	11 f4       	brne	.+4      	; 0x29e2 <__ftoa_engine+0x130>
    29de:	8a 95       	dec	r24
    29e0:	e6 cf       	rjmp	.-52     	; 0x29ae <__ftoa_engine+0xfc>
    29e2:	e8 94       	clt
    29e4:	01 50       	subi	r16, 0x01	; 1
    29e6:	30 f0       	brcs	.+12     	; 0x29f4 <__ftoa_engine+0x142>
    29e8:	08 0f       	add	r16, r24
    29ea:	0a f4       	brpl	.+2      	; 0x29ee <__ftoa_engine+0x13c>
    29ec:	00 27       	eor	r16, r16
    29ee:	02 17       	cp	r16, r18
    29f0:	08 f4       	brcc	.+2      	; 0x29f4 <__ftoa_engine+0x142>
    29f2:	20 2f       	mov	r18, r16
    29f4:	23 95       	inc	r18
    29f6:	02 2f       	mov	r16, r18
    29f8:	7a 33       	cpi	r23, 0x3A	; 58
    29fa:	28 f0       	brcs	.+10     	; 0x2a06 <__ftoa_engine+0x154>
    29fc:	79 e3       	ldi	r23, 0x39	; 57
    29fe:	7d 93       	st	X+, r23
    2a00:	2a 95       	dec	r18
    2a02:	e9 f7       	brne	.-6      	; 0x29fe <__ftoa_engine+0x14c>
    2a04:	10 c0       	rjmp	.+32     	; 0x2a26 <__ftoa_engine+0x174>
    2a06:	7d 93       	st	X+, r23
    2a08:	2a 95       	dec	r18
    2a0a:	89 f6       	brne	.-94     	; 0x29ae <__ftoa_engine+0xfc>
    2a0c:	06 94       	lsr	r0
    2a0e:	97 95       	ror	r25
    2a10:	67 95       	ror	r22
    2a12:	37 95       	ror	r19
    2a14:	17 95       	ror	r17
    2a16:	17 94       	ror	r1
    2a18:	e1 18       	sub	r14, r1
    2a1a:	f1 0a       	sbc	r15, r17
    2a1c:	43 0b       	sbc	r20, r19
    2a1e:	56 0b       	sbc	r21, r22
    2a20:	c9 0b       	sbc	r28, r25
    2a22:	d0 09       	sbc	r29, r0
    2a24:	98 f0       	brcs	.+38     	; 0x2a4c <__ftoa_engine+0x19a>
    2a26:	23 95       	inc	r18
    2a28:	7e 91       	ld	r23, -X
    2a2a:	73 95       	inc	r23
    2a2c:	7a 33       	cpi	r23, 0x3A	; 58
    2a2e:	08 f0       	brcs	.+2      	; 0x2a32 <__ftoa_engine+0x180>
    2a30:	70 e3       	ldi	r23, 0x30	; 48
    2a32:	7c 93       	st	X, r23
    2a34:	20 13       	cpse	r18, r16
    2a36:	b8 f7       	brcc	.-18     	; 0x2a26 <__ftoa_engine+0x174>
    2a38:	7e 91       	ld	r23, -X
    2a3a:	70 61       	ori	r23, 0x10	; 16
    2a3c:	7d 93       	st	X+, r23
    2a3e:	30 f0       	brcs	.+12     	; 0x2a4c <__ftoa_engine+0x19a>
    2a40:	83 95       	inc	r24
    2a42:	71 e3       	ldi	r23, 0x31	; 49
    2a44:	7d 93       	st	X+, r23
    2a46:	70 e3       	ldi	r23, 0x30	; 48
    2a48:	2a 95       	dec	r18
    2a4a:	e1 f7       	brne	.-8      	; 0x2a44 <__ftoa_engine+0x192>
    2a4c:	11 24       	eor	r1, r1
    2a4e:	ef 90       	pop	r14
    2a50:	ff 90       	pop	r15
    2a52:	0f 91       	pop	r16
    2a54:	1f 91       	pop	r17
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	99 27       	eor	r25, r25
    2a5c:	87 fd       	sbrc	r24, 7
    2a5e:	90 95       	com	r25
    2a60:	08 95       	ret

00002a62 <__prologue_saves__>:
    2a62:	2f 92       	push	r2
    2a64:	3f 92       	push	r3
    2a66:	4f 92       	push	r4
    2a68:	5f 92       	push	r5
    2a6a:	6f 92       	push	r6
    2a6c:	7f 92       	push	r7
    2a6e:	8f 92       	push	r8
    2a70:	9f 92       	push	r9
    2a72:	af 92       	push	r10
    2a74:	bf 92       	push	r11
    2a76:	cf 92       	push	r12
    2a78:	df 92       	push	r13
    2a7a:	ef 92       	push	r14
    2a7c:	ff 92       	push	r15
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	ca 1b       	sub	r28, r26
    2a8c:	db 0b       	sbc	r29, r27
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	09 94       	ijmp

00002a9a <__epilogue_restores__>:
    2a9a:	2a 88       	ldd	r2, Y+18	; 0x12
    2a9c:	39 88       	ldd	r3, Y+17	; 0x11
    2a9e:	48 88       	ldd	r4, Y+16	; 0x10
    2aa0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2aa2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2aa4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aa6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aa8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aaa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aac:	b9 84       	ldd	r11, Y+9	; 0x09
    2aae:	c8 84       	ldd	r12, Y+8	; 0x08
    2ab0:	df 80       	ldd	r13, Y+7	; 0x07
    2ab2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ab4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ab6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ab8:	1b 81       	ldd	r17, Y+3	; 0x03
    2aba:	aa 81       	ldd	r26, Y+2	; 0x02
    2abc:	b9 81       	ldd	r27, Y+1	; 0x01
    2abe:	ce 0f       	add	r28, r30
    2ac0:	d1 1d       	adc	r29, r1
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	ed 01       	movw	r28, r26
    2ace:	08 95       	ret

00002ad0 <_exit>:
    2ad0:	f8 94       	cli

00002ad2 <__stop_program>:
    2ad2:	ff cf       	rjmp	.-2      	; 0x2ad2 <__stop_program>
